--[[
    NeonUI Library
    Desarrollado por: MRX
    Tema Lava por: Claude
    
    Una biblioteca de UI moderna y personalizable para scripts de Roblox
    Compatible con PC y dispositivos móviles
    
    Características:
    - Diseño moderno con animaciones fluidas y efectos de lava
    - Totalmente personalizable con temas
    - Soporte para dispositivos móviles y PC
    - Sistema de guardado de configuración
    - Componentes avanzados e interactivos
]]

-- Servicios
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local CoreGui = game:GetService("CoreGui")

-- Variables locales
local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()
local isMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled

-- Constantes UI - Tema Lava con transparencia
local FONT = Enum.Font.GothamSemibold
local FONT_SIZE = 14
local PRIMARY_COLOR = Color3.fromRGB(25, 8, 8)      -- Rojo oscuro
local SECONDARY_COLOR = Color3.fromRGB(35, 15, 15)  -- Rojo más claro
local ACCENT_COLOR = Color3.fromRGB(255, 65, 10)    -- Naranja lava
local TEXT_COLOR = Color3.fromRGB(255, 255, 255)    -- Blanco
local TRANSPARENCY = 0.15                           -- Añadido para transparencia
local CORNER_RADIUS = UDim.new(0, 8)
local STROKE_THICKNESS = 1
local STROKE_COLOR = Color3.fromRGB(230, 30, 30)    -- Borde rojo intenso
local GLOW_COLOR = Color3.fromRGB(255, 100, 20)     -- Brillo lava

-- Utilidades
local Utility = {}

-- Crear objetos de instancia con propiedades
function Utility:Create(instance, properties, children)
    local object = Instance.new(instance)
    
    for property, value in pairs(properties or {}) do
        object[property] = value
    end
    
    for _, child in ipairs(children or {}) do
        child.Parent = object
    end
    
    return object
end

-- Crear Tween
function Utility:Tween(instance, properties, duration, ...)
    local tween = TweenService:Create(instance, TweenInfo.new(duration, ...), properties)
    tween:Play()
    return tween
end

-- Ripple Effect (efecto de onda al hacer clic)
function Utility:Ripple(instance)
    local ripple = self:Create("Frame", {
        Name = "Ripple",
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = GLOW_COLOR,
        BackgroundTransparency = 0.7,
        Position = UDim2.fromOffset(Mouse.X - instance.AbsolutePosition.X, Mouse.Y - instance.AbsolutePosition.Y),
        Size = UDim2.fromScale(0, 0),
        ZIndex = 2,
        Parent = instance
    })
    
    local corner = self:Create("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = ripple
    })
    
    local targetSize = UDim2.fromScale(2, 2)
    self:Tween(ripple, {Size = targetSize, BackgroundTransparency = 1}, 0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    
    task.delay(0.5, function()
        ripple:Destroy()
    end)
end

-- Arrastrar elementos - Mejorado para móvil
function Utility:Draggable(frame, dragui)
    local dragging, dragInput, dragStart, startPos
    local dragDelay = 0.05 -- Pequeño retraso para distinguir entre clic y arrastre en móvil
    local clickTime = 0
    local dragDistance = 5 -- Distancia mínima para considerar un arrastre
    
    local function updateDrag(input)
        local delta = input.Position - dragStart
        if (delta.Magnitude > dragDistance) then -- Solo mover si supera la distancia mínima
            frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end
    
    dragui.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            clickTime = tick()
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
            
            -- Solo activar el arrastre después de un pequeño retraso (para móvil)
            task.delay(dragDelay, function()
                if (tick() - clickTime > dragDelay) then
                    dragging = true
                end
            end)
        end
    end)
    
    dragui.InputChanged:Connect(function(input)
        if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) and dragging then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            updateDrag(input)
        end
    end)
end

-- Crear efecto de resplandor de lava
function Utility:CreateGlow(parent, color, size)
    -- Verificar si ya existe y eliminarlo para evitar superposición
    if parent:FindFirstChild("Glow") then
        parent.Glow:Destroy()
    end
    
    local glow = self:Create("ImageLabel", {
        Name = "Glow",
        BackgroundTransparency = 1,
        Image = "rbxassetid://5028857084", -- Imagen de resplandor circular
        ImageColor3 = color or GLOW_COLOR,
        ImageTransparency = 0.7,
        ZIndex = parent.ZIndex - 1,
        Parent = parent
    })
    
    -- Calcular tamaño del resplandor
    local growSize = size or 1.5
    local parentSize = parent.AbsoluteSize
    glow.Size = UDim2.new(1, parentSize.X * (growSize - 1), 1, parentSize.Y * (growSize - 1))
    glow.Position = UDim2.new(0.5, -parentSize.X * (growSize - 1)/2, 0.5, -parentSize.Y * (growSize - 1)/2)
    glow.AnchorPoint = Vector2.new(0.5, 0.5)
    
    -- Animar el resplandor
    spawn(function()
        local pulseSpeed = 0.05
        local minTrans = 0.7
        local maxTrans = 0.9
        
        while glow.Parent do
            for i = minTrans, maxTrans, pulseSpeed do
                if not glow or not glow.Parent then break end
                glow.ImageTransparency = i
                wait(0.05)
            end
            for i = maxTrans, minTrans, -pulseSpeed do
                if not glow or not glow.Parent then break end
                glow.ImageTransparency = i
                wait(0.05)
            end
        end
    end)
    
    return glow
end

-- Crear partículas de lava para fondos
function Utility:CreateLavaParticles(parent, count)
    -- Eliminar partículas anteriores si existen
    if parent:FindFirstChild("LavaParticles") then
        parent.LavaParticles:Destroy()
    end
    
    local particleCount = count or 10
    local container = self:Create("Frame", {
        Name = "LavaParticles",
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        ClipsDescendants = true,
        ZIndex = parent.ZIndex + 1,
        Parent = parent
    })
    
    for i = 1, particleCount do
        local particle = self:Create("Frame", {
            Name = "Particle_" .. i,
            BackgroundColor3 = GLOW_COLOR,
            BackgroundTransparency = math.random(4, 8)/10,
            BorderSizePixel = 0,
            Position = UDim2.new(math.random(), 0, math.random(), 0),
            Size = UDim2.new(0, math.random(2, 5), 0, math.random(2, 5)),
            ZIndex = container.ZIndex,
            Parent = container
        })
        
        -- Hacer redondas las partículas
        self:Create("UICorner", {
            CornerRadius = UDim.new(1, 0),
            Parent = particle
        })
        
        -- Añadir brillo a las partículas
        self:CreateGlow(particle, GLOW_COLOR, 1.3)
        
        -- Animar partícula
        spawn(function()
            local speed = math.random(10, 30)/1000
            local startPosX = particle.Position.X.Scale
            local wobbleSpeed = math.random(5, 20)/10
            local wobbleIntensity = math.random(5, 15)/1000
            
            while particle.Parent do
                -- Movimiento ascendente
                local newPosY = (particle.Position.Y.Scale - speed) % 1.2
                if newPosY > 1 then newPosY = -0.2 end
                
                -- Movimiento en zigzag
                local wobble = math.sin(time() * wobbleSpeed) * wobbleIntensity
                local newPosX = (startPosX + wobble) % 1
                
                -- Actualizar posición
                particle.Position = UDim2.new(newPosX, 0, newPosY, 0)
                
                -- Cambio de transparencia sutil
                particle.BackgroundTransparency = 0.4 + math.sin(time() * 2) * 0.2
                
                wait()
            end
        end)
    end
    
    return container
end

-- Sistema de guardado
local SaveSystem = {}

-- Generar ID único para cada script
function SaveSystem:GenerateUID()
    local template = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx"
    return string.gsub(template, "[xy]", function (c)
        local v = (c == "x") and math.random(0, 0xf) or math.random(8, 0xb)
        return string.format("%x", v)
    end)
end

-- Guardar configuración
function SaveSystem:SaveSettings(name, settings)
    if not name then return end
    
    local success, result = pcall(function()
        return HttpService:JSONEncode(settings)
    end)
    
    if success then
        if writefile then
            local folderPath = "NeonUI/"
            local fileName = folderPath .. name .. ".json"
            
            if not isfolder(folderPath) then
                makefolder(folderPath)
            end
            
            writefile(fileName, result)
            return true
        end
    end
    
    return false
end

-- Cargar configuración
function SaveSystem:LoadSettings(name)
    if not name then return end
    
    local folderPath = "NeonUI/"
    local fileName = folderPath .. name .. ".json"
    
    if readfile and isfile and isfile(fileName) then
        local success, result = pcall(function()
            return HttpService:JSONDecode(readfile(fileName))
        end)
        
        if success then
            return result
        end
    end
    
    return nil
end

-- NeonUI principal
local NeonUI = {
    Windows = {},
    Theme = {
        Primary = PRIMARY_COLOR,
        Secondary = SECONDARY_COLOR,
        Accent = ACCENT_COLOR,
        Text = TEXT_COLOR,
        Stroke = STROKE_COLOR,
        Glow = GLOW_COLOR,
        Transparency = TRANSPARENCY,
        CornerRadius = CORNER_RADIUS,
        Font = FONT,
        FontSize = FONT_SIZE
    },
    Flags = {},
    Version = "3.0.0"
}

-- Inicialización de la UI
function NeonUI:Init()
    -- Destruir GUI existente si existe
    if getgenv().NeonUIObject then
        getgenv().NeonUIObject:Destroy()
    end
    
    -- Crear contenedor principal
    self.Container = Utility:Create("ScreenGui", {
        Name = "NeonUI",
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        ResetOnSpawn = false
    })
    
    -- Establecer el parent con la protección adecuada
    if gethui then
        self.Container.Parent = gethui()
    elseif syn and syn.protect_gui then
        syn.protect_gui(self.Container)
        self.Container.Parent = CoreGui
    else
        self.Container.Parent = CoreGui
    end
    
    getgenv().NeonUIObject = self.Container
    
    -- Notificación de inicio
    self:Notify({
        Title = "NeonUI",
        Content = "Biblioteca inicializada correctamente v" .. self.Version,
        Duration = 3
    })
    
    return self
end

-- Sistema de notificaciones mejorado con tema lava
function NeonUI:Notify(options)
    options = options or {}
    local notification = {
        Title = options.Title or "Notification",
        Content = options.Content or "",
        Duration = options.Duration or 5
    }
    
    -- Marco principal de notificación
    local notifFrame = Utility:Create("Frame", {
        Name = "Notification",
        BackgroundColor3 = self.Theme.Primary,
        BackgroundTransparency = self.Theme.Transparency, -- Añadir transparencia
        BorderSizePixel = 0,
        Position = UDim2.new(1, -20, 1, -20),
        AnchorPoint = Vector2.new(1, 1),
        Size = UDim2.new(0, 280, 0, 80),
        Parent = self.Container
    })
    
    -- Bordes redondeados
    Utility:Create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = notifFrame
    })
    
    -- Agregar gradiente para efecto lava
    local gradient = Utility:Create("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, self.Theme.Primary),
            ColorSequenceKeypoint.new(0.5, self.Theme.Primary:Lerp(self.Theme.Secondary, 0.5)),
            ColorSequenceKeypoint.new(1, self.Theme.Secondary)
        }),
        Rotation = 90,
        Parent = notifFrame
    })
    
    -- Animar gradiente
    spawn(function()
        local offset = 0
        while notifFrame.Parent do
            offset = offset + 0.01
            if offset > 1 then offset = 0 end
            gradient.Offset = Vector2.new(0, offset)
            wait(0.03)
        end
    end)
    
    -- Partículas de lava
    Utility:CreateLavaParticles(notifFrame, 6)
    
    -- Barra de acento
    local accentBar = Utility:Create("Frame", {
        Name = "AccentBar",
        BackgroundColor3 = self.Theme.Accent,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(0, 4, 1, 0),
        Parent = notifFrame
    })
    
    -- Bordes redondeados para barra
    Utility:Create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = accentBar
    })
    
    -- Título
    local titleLabel = Utility:Create("TextLabel", {
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.fromOffset(12, 8),
        Size = UDim2.new(1, -50, 0, 24),
        Font = self.Theme.Font,
        Text = notification.Title,
        TextColor3 = self.Theme.Text,
        TextSize = self.Theme.FontSize + 2,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = notifFrame
    })
    
    -- Gradiente para el título
    Utility:Create("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, self.Theme.Text),
            ColorSequenceKeypoint.new(1, self.Theme.Accent)
        }),
        Parent = titleLabel
    })
    
    -- Contenido
    local contentLabel = Utility:Create("TextLabel", {
        Name = "Content",
        BackgroundTransparency = 1,
        Position = UDim2.fromOffset(12, 32),
        Size = UDim2.new(1, -24, 0, 40),
        Font = self.Theme.Font,
        Text = notification.Content,
        TextColor3 = Color3.fromRGB(220, 220, 220),
        TextSize = self.Theme.FontSize - 1,
        TextWrapped = true,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Top,
        Parent = notifFrame
    })
    
    -- Botón de cerrar
    local closeButton = Utility:Create("ImageButton", {
        Name = "CloseButton",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -24, 0, 8),
        Size = UDim2.fromOffset(16, 16),
        Image = "rbxassetid://7733717447",
        ImageColor3 = self.Theme.Accent,
        Parent = notifFrame
    })
    
    -- Barra de progreso
    local progressBar = Utility:Create("Frame", {
        Name = "ProgressBar",
        BackgroundColor3 = self.Theme.Accent,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 1, -2),
        Size = UDim2.new(1, 0, 0, 2),
        Parent = notifFrame
    })
    
    -- Animación de entrada
    notifFrame.Position = UDim2.new(1, 300, 1, -20)
    notifFrame.Visible = true
    
    -- Animar entrada
    Utility:Tween(notifFrame, {Position = UDim2.new(1, -20, 1, -20)}, 0.3, Enum.EasingStyle.Quint)
    
    -- Barra de progreso
    Utility:Tween(progressBar, {Size = UDim2.new(0, 0, 0, 2)}, notification.Duration)
    
    -- Evento de cerrar
    closeButton.MouseButton1Click:Connect(function()
        Utility:Tween(notifFrame, {Position = UDim2.new(1, 300, 1, -20)}, 0.3, Enum.EasingStyle.Quint)
        task.wait(0.3)
        notifFrame:Destroy()
    end)
    
    -- Auto cerrar después de la duración
    task.delay(notification.Duration, function()
        if notifFrame and notifFrame.Parent then
            Utility:Tween(notifFrame, {Position = UDim2.new(1, 300, 1, -20)}, 0.3, Enum.EasingStyle.Quint)
            task.wait(0.3)
            notifFrame:Destroy()
        end
    end)
    
    return notifFrame
end

-- Diálogo modal con tema lava
function NeonUI:Dialog(options)
    options = options or {}
    local dialog = {
        Title = options.Title or "Dialog",
        Content = options.Content or "",
        Buttons = options.Buttons or {{Title = "OK", Callback = function() end}}
    }
    
    -- Overlay de fondo
    local overlay = Utility:Create("Frame", {
        Name = "DialogOverlay",
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        BackgroundTransparency = 0.5,
        BorderSizePixel = 0,
        Position = UDim2.fromScale(0, 0),
        Size = UDim2.fromScale(1, 1),
        ZIndex = 100,
        Parent = self.Container
    })
    
    -- Marco de diálogo
    local dialogFrame = Utility:Create("Frame", {
        Name = "DialogFrame",
        BackgroundColor3 = self.Theme.Primary,
        BackgroundTransparency = self.Theme.Transparency, -- Añadir transparencia
        BorderSizePixel = 0,
        Position = UDim2.fromScale(0.5, 0.5),
        AnchorPoint = Vector2.new(0.5, 0.5),
        Size = UDim2.fromOffset(300, 150),
        ZIndex = 101,
        Parent = overlay
    })
    
    -- Bordes redondeados
    Utility:Create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = dialogFrame
    })
    
    -- Agregar gradiente para efecto lava
    local gradient = Utility:Create("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, self.Theme.Primary),
            ColorSequenceKeypoint.new(0.5, self.Theme.Primary:Lerp(self.Theme.Secondary, 0.5)),
            ColorSequenceKeypoint.new(1, self.Theme.Secondary)
        }),
        Rotation = 90,
        Parent = dialogFrame
    })
    
    -- Animar gradiente
    spawn(function()
        local offset = 0
        while dialogFrame.Parent do
            offset = offset + 0.01
            if offset > 1 then offset = 0 end
            gradient.Offset = Vector2.new(0, offset)
            wait(0.03)
        end
    end)
    
    -- Añadir partículas de lava
    Utility:CreateLavaParticles(dialogFrame, 8)
    
    -- Borde interior brillante
    local innerBorder = Utility:Create("UIStroke", {
        Color = self.Theme.Accent,
        Thickness = 1.5,
        Transparency = 0.7,
        ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
        Parent = dialogFrame
    })
    
    -- Animar el borde
    spawn(function()
        while innerBorder.Parent do
            for i = 0.7, 0.4, -0.02 do
                if not innerBorder or not innerBorder.Parent then break end
                innerBorder.Transparency = i
                wait(0.05)
            end
            for i = 0.4, 0.7, 0.02 do
                if not innerBorder or not innerBorder.Parent then break end
                innerBorder.Transparency = i
                wait(0.05)
            end
        end
    end)
    
    -- Título
    local titleLabel = Utility:Create("TextLabel", {
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.fromOffset(15, 10),
        Size = UDim2.new(1, -30, 0, 24),
        Font = self.Theme.Font,
        Text = dialog.Title,
        TextColor3 = self.Theme.Text,
        TextSize = self.Theme.FontSize + 2,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 102,
        Parent = dialogFrame
    })
    
    -- Gradiente para el título
    Utility:Create("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, self.Theme.Text),
            ColorSequenceKeypoint.new(1, self.Theme.Accent)
        }),
        Parent = titleLabel
    })
    
    -- Separador
    local separator = Utility:Create("Frame", {
        Name = "Separator",
        BackgroundColor3 = self.Theme.Accent,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 15, 0, 40),
        Size = UDim2.new(0, 50, 0, 2),
        ZIndex = 102,
        Parent = dialogFrame
    })
    
    -- Gradiente para el separador
    local sepGradient = Utility:Create("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, self.Theme.Accent),
            ColorSequenceKeypoint.new(1, self.Theme.Accent:Lerp(self.Theme.Text, 0.5))
        }),
        Parent = separator
    })
    
    -- Animar separador
    spawn(function()
        local offset = 0
        while separator.Parent do
            offset = offset + 0.01
            if offset > 1 then offset = 0 end
            sepGradient.Offset = Vector2.new(offset, 0)
            wait(0.03)
        end
    end)
    
    -- Contenido
    local contentLabel = Utility:Create("TextLabel", {
        Name = "Content",
        BackgroundTransparency = 1,
        Position = UDim2.fromOffset(15, 50),
        Size = UDim2.new(1, -30, 0, 60),
        Font = self.Theme.Font,
        Text = dialog.Content,
        TextColor3 = Color3.fromRGB(220, 220, 220),
        TextSize = self.Theme.FontSize,
        TextWrapped = true,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Top,
        ZIndex = 102,
        Parent = dialogFrame
    })
    
    -- Contenedor de botones
    local buttonContainer = Utility:Create("Frame", {
        Name = "ButtonContainer",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 1, -50),
        Size = UDim2.new(1, 0, 0, 40),
        ZIndex = 102,
        Parent = dialogFrame
    })
    
    -- Layout para botones
    Utility:Create("UIListLayout", {
        Padding = UDim.new(0, 10),
        FillDirection = Enum.FillDirection.Horizontal,
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Parent = buttonContainer
    })
    
    -- Crear botones
    for i, buttonInfo in ipairs(dialog.Buttons) do
        local button = Utility:Create("TextButton", {
            Name = "Button_" .. i,
            BackgroundColor3 = self.Theme.Accent,
            BorderSizePixel = 0,
            Size = UDim2.new(0, 100, 0, 30),
            Font = self.Theme.Font,
            Text = buttonInfo.Title,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = self.Theme.FontSize,
            ZIndex = 103,
            Parent = buttonContainer
        })
        
        -- Bordes redondeados para botón
        Utility:Create("UICorner", {
            CornerRadius = UDim.new(0, 4),
            Parent = button
        })
        
        -- Brillo para el botón
        Utility:CreateGlow(button, self.Theme.Glow, 1.2)
        
        -- Evento de clic
        button.MouseButton1Click:Connect(function()
            -- Efecto ripple
            Utility:Ripple(button)
            
            -- Ejecutar callback
            if buttonInfo.Callback then
                buttonInfo.Callback()
            end
            
            -- Animación de cierre
            Utility:Tween(dialogFrame, {Size = UDim2.fromOffset(0, 0), Position = UDim2.fromScale(0.5, 0.5)}, 0.3)
            Utility:Tween(overlay, {BackgroundTransparency = 1}, 0.3)
            task.wait(0.3)
            overlay:Destroy()
        end)
        
        -- Efectos de hover
        button.MouseEnter:Connect(function()
            Utility:Tween(button, {BackgroundColor3 = self.Theme.Accent:Lerp(Color3.new(1,1,1), 0.2)}, 0.2)
        end)
        
        button.MouseLeave:Connect(function()
            Utility:Tween(button, {BackgroundColor3 = self.Theme.Accent}, 0.2)
        end)
    end
    
    -- Animación de apertura
    dialogFrame.Size = UDim2.fromOffset(0, 0)
    overlay.BackgroundTransparency = 1
    Utility:Tween(dialogFrame, {Size = UDim2.fromOffset(300, 150)}, 0.3)
    Utility:Tween(overlay, {BackgroundTransparency = 0.5}, 0.3)
    
    return dialog
end

-- Obtener icono desde nombre
function NeonUI:GetIcon(name)
    local icons = {
        home = "7733960981",
        settings = "7734053495",
        user = "7743871002",
        star = "7734068321",
        warning = "7734036668",
        info = "7734010138",
        plus = "7734056604",
        minus = "7734062493",
        search = "7734093360",
        box = "7734155436",
        folder = "7734172055",
        chevron = "7734238686",
        gear = "7734053495",
        bell = "7743855514",
        heart = "7733718216",
        bookmark = "7743895266",
        moon = "7743878047",
        sun = "7733920644",
        cloud = "7733821549",
        globe = "7733778299",
        lock = "7733885257",
        unlock = "7733726102",
        key = "7733832079",
        flag = "7733777611",
        trash = "7733673941",
        edit = "7733799486",
        pencil = "7733696245",
        image = "7733946818",
        video = "7733709455",
        music = "7733656793",
        mic = "7733839766",
        phone = "7733790917",
        mail = "7733889662",
        send = "7733745099",
        code = "7733944826",
        terminal = "7733794336",
        link = "7733865183",
        coffee = "7733951482",
        file = "7733791228",
        archive = "7743824158",
        layers = "7733859130",
        compass = "7733857969",
        map = "7733837011",
        ["map-pin"] = "7733824551",
        award = "7743823882",
        upload = "7734172322",
        download = "7733982464",
        camera = "7733930958",
        play = "7743985991",
        pause = "7733904064",
        stop = "7733754058",
        message = "7733873146",
        users = "7734095912",
        activity = "7743823554",
        alert = "7743824019",
        eye = "7733760318",
        ["eye-off"] = "7743877488",
        gitlab = "7733897366",
        github = "7733873313",
        calendar = "7733812303",
        paperclip = "7733903117",
        scissors = "7734142322",
        tag = "7734197488",
        tags = "7733980420",
        tool = "7733928794",
        ["bar-chart"] = "7743825153",
        ["pie-chart"] = "7743883343",
        ["line-chart"] = "7743880222",
        zap = "7733679869",
        check = "7733956746",
        ["x"] = "7733717447",
        sliders = "7734176202",
        target = "7734226711",
        shield = "7734231071",
        sword = "7743915270",
        wifi = "7734114676",
        bluetooth = "7733768238",
        share = "7734181035",
        printer = "7733913543",
        cpu = "7733929456",
        speaker = "7734052733",
        tv = "7733766052",
        ["log-out"] = "7733978918",
        ["log-in"] = "7733923449",
        fire = "9835862639",  -- Icono de fuego para tema lava
        explosion = "9835868665", -- Explosión para tema lava
        flame = "9835865192",    -- Llama para tema lava
        volcano = "9482093348"   -- Volcán para tema lava
    }
    
    return icons[name:lower()] or "7733717447" -- Default to X icon
end

-- Crear ventana
function NeonUI:CreateWindow(options)
    options = options or {}
    local window = {
        Title = options.Title or "NeonUI",
        SubTitle = options.SubTitle or "",
        Size = options.Size or UDim2.fromOffset(550, 400),
        Position = options.Position or UDim2.fromScale(0.5, 0.5),
        Theme = options.Theme or "Lava",
        Tabs = {},
        TabsFrame = nil,
        TabsContainer = nil,
        ContentContainer = nil,
        CurrentTab = nil,
        Settings = {},
        Flags = {},
        Minimized = false -- Seguimiento del estado minimizado
    }
    
    -- Aplicar tema
    if window.Theme == "Dark" then
        self.Theme.Primary = Color3.fromRGB(32, 35, 36)
        self.Theme.Secondary = Color3.fromRGB(50, 55, 56)
    elseif window.Theme == "Light" then
        self.Theme.Primary = Color3.fromRGB(240, 240, 240)
        self.Theme.Secondary = Color3.fromRGB(255, 255, 255)
        self.Theme.Text = Color3.fromRGB(50, 50, 50)
    elseif window.Theme == "Midnight" then
        self.Theme.Primary = Color3.fromRGB(25, 27, 38)
        self.Theme.Secondary = Color3.fromRGB(35, 38, 50)
    elseif window.Theme == "Nebula" then
        self.Theme.Primary = Color3.fromRGB(35, 25, 50)
        self.Theme.Secondary = Color3.fromRGB(48, 34, 70)
        self.Theme.Accent = Color3.fromRGB(165, 82, 255)
    elseif window.Theme == "Lava" then
        self.Theme.Primary = Color3.fromRGB(25, 8, 8)
        self.Theme.Secondary = Color3.fromRGB(35, 15, 15)
        self.Theme.Accent = Color3.fromRGB(255, 65, 10)
        self.Theme.Glow = Color3.fromRGB(255, 100, 20)
        self.Theme.Stroke = Color3.fromRGB(230, 30, 30)
    end
    
    -- Crear ventana principal
    window.Frame = Utility:Create("Frame", {
        Name = "WindowFrame",
        BackgroundColor3 = self.Theme.Primary,
        BackgroundTransparency = self.Theme.Transparency, -- Añadir transparencia
        BorderSizePixel = 0,
        Position = UDim2.fromScale(0.5, 0.5),
        AnchorPoint = Vector2.new(0.5, 0.5),
        Size = window.Size,
        Parent = self.Container
    })
    
    -- Bordes redondeados
    Utility:Create("UICorner", {
        CornerRadius = self.Theme.CornerRadius,
        Parent = window.Frame
    })
    
    -- Agregar gradiente para efecto lava
    if window.Theme == "Lava" then
        local gradient = Utility:Create("UIGradient", {
            Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, self.Theme.Primary),
                ColorSequenceKeypoint.new(0.5, self.Theme.Primary:Lerp(self.Theme.Secondary, 0.5)),
                ColorSequenceKeypoint.new(1, self.Theme.Secondary)
            }),
            Rotation = 90,
            Parent = window.Frame
        })
        
        -- Animar gradiente
        spawn(function()
            local offset = 0
            while window.Frame.Parent do
                offset = offset + 0.005
                if offset > 1 then offset = 0 end
                gradient.Offset = Vector2.new(0, offset)
                wait(0.03)
            end
        end)
        
        -- Agregar partículas de lava al fondo
        Utility:CreateLavaParticles(window.Frame, 12)
        
        -- Borde interior brillante (una sola capa)
        local innerBorder = Utility:Create("UIStroke", {
            Color = self.Theme.Accent,
            Thickness = 1.5,
            Transparency = 0.7,
            ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
            Parent = window.Frame
        })
        
        -- Animar el borde
        spawn(function()
            while innerBorder.Parent do
                for i = 0.7, 0.5, -0.01 do
                    if not innerBorder or not innerBorder.Parent then break end
                    innerBorder.Transparency = i
                    wait(0.05)
                end
                for i = 0.5, 0.7, 0.01 do
                    if not innerBorder or not innerBorder.Parent then break end
                    innerBorder.Transparency = i
                    wait(0.05)
                end
            end
        end)
    end
    
    -- Barra de título
    window.TitleBar = Utility:Create("Frame", {
        Name = "TitleBar",
        BackgroundColor3 = self.Theme.Secondary,
        BackgroundTransparency = self.Theme.Transparency, -- Añadir transparencia
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 36),
        Parent = window.Frame
    })
    
    -- Bordes redondeados para la barra de título
    Utility:Create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = window.TitleBar
    })
    
    -- Si es tema lava, agregar gradient y arreglar esquinas
    if window.Theme == "Lava" then
        -- Gradient para la barra de título
        local titleGradient = Utility:Create("UIGradient", {
            Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, self.Theme.Secondary:Lerp(self.Theme.Accent, 0.2)),
                ColorSequenceKeypoint.new(0.5, self.Theme.Secondary),
                ColorSequenceKeypoint.new(1, self.Theme.Secondary:Lerp(self.Theme.Accent, 0.1))
            }),
            Rotation = 90,
            Parent = window.TitleBar
        })
        
        -- Fijar esquinas inferiores
        local bottomFixFrame = Utility:Create("Frame", {
            Name = "BottomFixFrame",
            BackgroundColor3 = self.Theme.Secondary,
            BackgroundTransparency = self.Theme.Transparency, -- Añadir transparencia
            BorderSizePixel = 0,
            Position = UDim2.new(0, 0, 1, -10),
            Size = UDim2.new(1, 0, 0, 10),
            ZIndex = window.TitleBar.ZIndex,
            Parent = window.TitleBar
        })
        
        -- Copiar gradiente
        titleGradient:Clone().Parent = bottomFixFrame
    end
    
    -- Título
    window.TitleText = Utility:Create("TextLabel", {
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.fromOffset(12, 0),
        Size = UDim2.new(1, -24, 1, 0),
        Font = self.Theme.Font,
        Text = window.Theme == "Lava" and "🌋 " .. window.Title or window.Title,
        TextColor3 = self.Theme.Text,
        TextSize = self.Theme.FontSize + 2,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = window.TitleBar
    })
    
    -- Si es tema lava, añadir gradient al texto
    if window.Theme == "Lava" then
        Utility:Create("UIGradient", {
            Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, self.Theme.Text),
                ColorSequenceKeypoint.new(1, self.Theme.Accent)
            }),
            Parent = window.TitleText
        })
    end
    
    -- Subtítulo
    if window.SubTitle and window.SubTitle ~= "" then
        window.SubTitleText = Utility:Create("TextLabel", {
            Name = "SubTitle",
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 12, 0, 20),
            Size = UDim2.new(1, -24, 0, 20),
            Font = self.Theme.Font,
            Text = window.SubTitle,
            TextColor3 = Color3.fromRGB(180, 180, 180),
            TextSize = self.Theme.FontSize - 2,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = window.TitleBar
        })
        
        window.TitleText.Position = UDim2.fromOffset(12, 3)
        window.TitleText.Size = UDim2.new(1, -24, 0, 20)
    end
    
    -- Botón de cerrar
    window.CloseButton = Utility:Create("ImageButton", {
        Name = "CloseButton",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -28, 0, 8),
        Size = UDim2.fromOffset(20, 20),
        Image = "rbxassetid://7733717447",
        ImageColor3 = window.Theme == "Lava" and self.Theme.Accent or Color3.fromRGB(220, 220, 220),
        Parent = window.TitleBar
    })
    
    -- Botón de minimizar
    window.MinimizeButton = Utility:Create("ImageButton", {
        Name = "MinimizeButton",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -52, 0, 8),
        Size = UDim2.fromOffset(20, 20),
        Image = "rbxassetid://7733774602",
        ImageColor3 = window.Theme == "Lava" and self.Theme.Accent or Color3.fromRGB(220, 220, 220),
        Parent = window.TitleBar
    })
    
    -- Botón flotante para cuando está minimizado
    window.FloatingButton = Utility:Create("ImageButton", {
        Name = "FloatingButton",
        BackgroundColor3 = self.Theme.Accent,
        BackgroundTransparency = 0.2,
        BorderSizePixel = 0,
        Position = UDim2.new(0.8, 0, 0.8, 0),
        Size = UDim2.fromOffset(44, 44),
        Image = "rbxassetid://9835862639", -- Icono de fuego
        ImageColor3 = Color3.fromRGB(255, 255, 255),
        Visible = false,
        Parent = self.Container
    })
    
    -- Bordes redondeados para botón flotante
    Utility:Create("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = window.FloatingButton
    })
    
    -- Brillo para el botón flotante
    Utility:CreateGlow(window.FloatingButton, self.Theme.Glow, 1.2)
    
    -- Hacer arrastrable el botón flotante
    Utility:Draggable(window.FloatingButton, window.FloatingButton)
    
    -- Funcionalidad de arrastrar ventana
    Utility:Draggable(window.Frame, window.TitleBar)
    
    -- Contenedor de tabs
    window.TabsFrame = Utility:Create("Frame", {
        Name = "TabsFrame",
        BackgroundColor3 = self.Theme.Secondary,
        BackgroundTransparency = self.Theme.Transparency, -- Añadir transparencia
        BorderSizePixel = 0,
        Position = UDim2.fromOffset(12, 48),
        Size = UDim2.new(0, 140, 1, -60),
        Parent = window.Frame
    })
    
    -- Bordes redondeados para tabs
    Utility:Create("UICorner", {
        CornerRadius = self.Theme.CornerRadius,
        Parent = window.TabsFrame
    })
    
    -- Si es tema lava, añadir efectos
    if window.Theme == "Lava" then
        Utility:Create("UIGradient", {
            Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, self.Theme.Secondary:Lerp(self.Theme.Primary, 0.3)),
                ColorSequenceKeypoint.new(0.5, self.Theme.Secondary),
                ColorSequenceKeypoint.new(1, self.Theme.Secondary:Lerp(self.Theme.Primary, 0.3))
            }),
            Rotation = 90,
            Parent = window.TabsFrame
        })
        
        -- Borde interior (una sola capa)
        Utility:Create("UIStroke", {
            Color = self.Theme.Accent,
            Thickness = 1,
            Transparency = 0.8,
            ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
            Parent = window.TabsFrame
        })
    end
    
    -- ScrollFrame para tabs
    window.TabsScrollFrame = Utility:Create("ScrollingFrame", {
        Name = "TabsScrollFrame",
        Active = true,
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.fromOffset(0, 10),
        Size = UDim2.new(1, 0, 1, -20),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = self.Theme.Accent,
        Parent = window.TabsFrame
    })
    
    -- Lista de tabs
    Utility:Create("UIListLayout", {
        Padding = UDim.new(0, 5),
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Parent = window.TabsScrollFrame
    })
    
    -- Padding para tabs
    Utility:Create("UIPadding", {
        PaddingLeft = UDim.new(0, 10),
        PaddingRight = UDim.new(0, 10),
        PaddingTop = UDim.new(0, 5),
        PaddingBottom = UDim.new(0, 5),
        Parent = window.TabsScrollFrame
    })
    
    -- Contenedor de contenido
    window.ContentFrame = Utility:Create("Frame", {
        Name = "ContentFrame",
        BackgroundColor3 = self.Theme.Secondary,
        BackgroundTransparency = self.Theme.Transparency, -- Añadir transparencia
        BorderSizePixel = 0,
        Position = UDim2.new(0, 164, 0, 48),
        Size = UDim2.new(1, -176, 1, -60),
        Parent = window.Frame
    })
    
    -- Bordes redondeados para contenido
    Utility:Create("UICorner", {
        CornerRadius = self.Theme.CornerRadius,
        Parent = window.ContentFrame
    })
    
    -- Si es tema lava, añadir efectos
    if window.Theme == "Lava" then
        Utility:Create("UIGradient", {
            Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, self.Theme.Secondary:Lerp(self.Theme.Primary, 0.2)),
                ColorSequenceKeypoint.new(0.5, self.Theme.Secondary),
                ColorSequenceKeypoint.new(1, self.Theme.Secondary:Lerp(self.Theme.Primary, 0.2))
            }),
            Rotation = 90,
            Parent = window.ContentFrame
        })
        
        -- Borde interior (una sola capa)
        Utility:Create("UIStroke", {
            Color = self.Theme.Accent,
            Thickness = 1,
            Transparency = 0.8,
            ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
            Parent = window.ContentFrame
        })
    end
    
    -- Funcionalidad de los botones
    window.CloseButton.MouseButton1Click:Connect(function()
        Utility:Tween(window.Frame, {Size = UDim2.fromOffset(0, 0), Position = UDim2.fromScale(0.5, 0.5)}, 0.25)
        
        if window.FloatingButton.Visible then
            Utility:Tween(window.FloatingButton, {Size = UDim2.fromOffset(0, 0)}, 0.25)
        end
        
        task.wait(0.25)
        self.Container:Destroy()
    end)
    
    -- Función mejorada para minimizar/maximizar
    function window:ToggleMinimize()
        window.Minimized = not window.Minimized
        
        if window.Minimized then
            -- Guardar tamaño original para restaurar después
            window.OriginalSize = window.Frame.Size
            
            -- Minimizar
            Utility:Tween(window.Frame, {Size = UDim2.new(1, 0, 0, 36)}, 0.25)
            
            -- Mostrar botón flotante después de un pequeño retraso
            task.delay(0.3, function()
                window.FloatingButton.Visible = true
                window.FloatingButton.Size = UDim2.fromOffset(0, 0)
                Utility:Tween(window.FloatingButton, {Size = UDim2.fromOffset(44, 44)}, 0.25)
            end)
        else
            -- Maximizar
            Utility:Tween(window.Frame, {Size = window.OriginalSize or window.Size}, 0.25)
            
            -- Ocultar botón flotante
            Utility:Tween(window.FloatingButton, {Size = UDim2.fromOffset(0, 0)}, 0.25)
            task.delay(0.3, function()
                window.FloatingButton.Visible = false
            end)
        end
    end
    
    -- Evento de botón de minimizar
    window.MinimizeButton.MouseButton1Click:Connect(function()
        window:ToggleMinimize()
    end)
    
    -- Evento de botón flotante
    window.FloatingButton.MouseButton1Click:Connect(function()
        window:ToggleMinimize()
    end)
    
    -- Métodos de ventana
    function window:AddTab(options)
        options = options or {}
        local tab = {
            Title = options.Title or "Tab",
            Icon = options.Icon,
            Sections = {},
            Elements = {}
        }
        
        -- Botón del tab
        tab.Button = Utility:Create("TextButton", {
            Name = options.Title .. "Tab",
            AutoButtonColor = false,
            BackgroundColor3 = NeonUI.Theme.Primary,
            BackgroundTransparency = NeonUI.Theme.Transparency, -- Añadir transparencia
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 0, 36),
            Font = NeonUI.Theme.Font,
            Text = "",
            TextColor3 = NeonUI.Theme.Text,
            TextSize = NeonUI.Theme.FontSize,
            Parent = window.TabsScrollFrame
        })
        
        -- Bordes redondeados para botón de tab
        Utility:Create("UICorner", {
            CornerRadius = UDim.new(0, 6),
            Parent = tab.Button
        })
        
        -- Si es tema lava, añadir efectos
        if window.Theme == "Lava" then
            -- Borde sutil
            Utility:Create("UIStroke", {
                Color = NeonUI.Theme.Accent,
                Thickness = 1,
                Transparency = 0.8,
                ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
                Parent = tab.Button
            })
        end
        
        -- Icono del tab (si existe)
        if tab.Icon then
            tab.IconImage = Utility:Create("ImageLabel", {
                Name = "Icon",
                BackgroundTransparency = 1,
                Position = UDim2.fromOffset(10, 8),
                Size = UDim2.fromOffset(20, 20),
                Image = (tab.Icon:find("rbxassetid://") and tab.Icon) or ("rbxassetid://" .. NeonUI:GetIcon(tab.Icon)),
                ImageColor3 = NeonUI.Theme.Text,
                Parent = tab.Button
            })
            
            tab.TitleLabel = Utility:Create("TextLabel", {
                Name = "Title",
                BackgroundTransparency = 1,
                Position = UDim2.fromOffset(36, 0),
                Size = UDim2.new(1, -46, 1, 0),
                Font = NeonUI.Theme.Font,
                Text = tab.Title,
                TextColor3 = NeonUI.Theme.Text,
                TextSize = NeonUI.Theme.FontSize,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = tab.Button
            })
        else
            tab.TitleLabel = Utility:Create("TextLabel", {
                Name = "Title",
                BackgroundTransparency = 1,
                Position = UDim2.fromOffset(10, 0),
                Size = UDim2.new(1, -20, 1, 0),
                Font = NeonUI.Theme.Font,
                Text = tab.Title,
                TextColor3 = NeonUI.Theme.Text,
                TextSize = NeonUI.Theme.FontSize,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = tab.Button
            })
        end
        
        -- Contenedor de contenido del tab
        tab.Container = Utility:Create("ScrollingFrame", {
            Name = options.Title .. "Container",
            Active = true,
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Position = UDim2.fromOffset(0, 0),
            Size = UDim2.new(1, 0, 1, 0),
            CanvasSize = UDim2.new(0, 0, 0, 0),
            AutomaticCanvasSize = Enum.AutomaticSize.Y,
            ScrollBarThickness = 4,
            ScrollBarImageColor3 = NeonUI.Theme.Accent,
            Visible = false,
            Parent = window.ContentFrame
        })
        
        -- Lista para elementos del tab
        Utility:Create("UIListLayout", {
            Padding = UDim.new(0, 8),
            HorizontalAlignment = Enum.HorizontalAlignment.Center,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Parent = tab.Container
        })
        
        -- Padding para elementos
        Utility:Create("UIPadding", {
            PaddingLeft = UDim.new(0, 10),
            PaddingRight = UDim.new(0, 10),
            PaddingTop = UDim.new(0, 10),
            PaddingBottom = UDim.new(0, 10),
            Parent = tab.Container
        })
        
        -- Seleccionar tab al hacer clic
        tab.Button.MouseButton1Click:Connect(function()
            window:SelectTab(tab)
        end)
        
        -- Añadir tab a la lista
        table.insert(window.Tabs, tab)
        
        -- Auto-seleccionar el primer tab
        if #window.Tabs == 1 then
            window:SelectTab(tab)
        end
        
        -- Métodos del tab
        function tab:AddSection(options)
            options = options or {}
            local section = {
                Title = options.Title or "Section",
                Elements = {}
            }
            
            -- Contenedor de sección
            section.Container = Utility:Create("Frame", {
                Name = section.Title .. "Section",
                BackgroundColor3 = NeonUI.Theme.Primary,
                BackgroundTransparency = NeonUI.Theme.Transparency, -- Añadir transparencia
                BorderSizePixel = 0,
                Size = UDim2.new(1, 0, 0, 36),
                AutomaticSize = Enum.AutomaticSize.Y,
                Parent = tab.Container
            })
            
            -- Bordes redondeados para sección
            Utility:Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = section.Container
            })
            
            -- Si es tema lava, añadir efectos
            if window.Theme == "Lava" then
                -- Gradiente
                Utility:Create("UIGradient", {
                    Color = ColorSequence.new({
                        ColorSequenceKeypoint.new(0, NeonUI.Theme.Primary),
                        ColorSequenceKeypoint.new(0.5, NeonUI.Theme.Primary:Lerp(NeonUI.Theme.Secondary, 0.3)),
                        ColorSequenceKeypoint.new(1, NeonUI.Theme.Primary)
                    }),
                    Rotation = 90,
                    Parent = section.Container
                })
                
                -- Borde sutil
                Utility:Create("UIStroke", {
                    Color = NeonUI.Theme.Accent,
                    Thickness = 1,
                    Transparency = 0.8,
                    ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
                    Parent = section.Container
                })
            end
            
            -- Título de sección
            section.TitleLabel = Utility:Create("TextLabel", {
                Name = "Title",
                BackgroundTransparency = 1,
                Position = UDim2.fromOffset(10, 5),
                Size = UDim2.new(1, -20, 0, 26),
                Font = NeonUI.Theme.Font,
                Text = section.Title,
                TextColor3 = NeonUI.Theme.Text,
                TextSize = NeonUI.Theme.FontSize,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = section.Container
            })
            
            -- Si es tema lava, añadir gradiente
            if window.Theme == "Lava" then
                Utility:Create("UIGradient", {
                    Color = ColorSequence.new({
                        ColorSequenceKeypoint.new(0, NeonUI.Theme.Text),
                        ColorSequenceKeypoint.new(1, NeonUI.Theme.Accent)
                    }),
                    Parent = section.TitleLabel
                })
            end
            
            -- Separador
            section.Separator = Utility:Create("Frame", {
                Name = "Separator",
                BackgroundColor3 = window.Theme == "Lava" and NeonUI.Theme.Accent or Color3.fromRGB(60, 60, 60),
                BorderSizePixel = 0,
                Position = UDim2.new(0, 10, 0, 30),
                Size = UDim2.new(0, 50, 0, 2),
                Parent = section.Container
            })
            
            -- Si es tema lava, añadir gradiente al separador
            if window.Theme == "Lava" then
                local sepGradient = Utility:Create("UIGradient", {
                    Color = ColorSequence.new({
                        ColorSequenceKeypoint.new(0, NeonUI.Theme.Accent),
                        ColorSequenceKeypoint.new(1, NeonUI.Theme.Accent:Lerp(NeonUI.Theme.Text, 0.5))
                    }),
                    Parent = section.Separator
                })
                
                -- Animar separador
                spawn(function()
                    local offset = 0
                    while section.Separator.Parent do
                        offset = offset + 0.01
                        if offset > 1 then offset = 0 end
                        sepGradient.Offset = Vector2.new(offset, 0)
                        wait(0.03)
                    end
                end)
            end
            
            -- Contenedor de elementos
            section.ElementsContainer = Utility:Create("Frame", {
                Name = "ElementsContainer",
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Position = UDim2.fromOffset(0, 40),
                Size = UDim2.new(1, 0, 0, 0),
                AutomaticSize = Enum.AutomaticSize.Y,
                Parent = section.Container
            })
            
            -- Lista para elementos
            Utility:Create("UIListLayout", {
                Padding = UDim.new(0, 8),
                HorizontalAlignment = Enum.HorizontalAlignment.Center,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Parent = section.ElementsContainer
            })
            
            -- Padding para elementos
            Utility:Create("UIPadding", {
                PaddingLeft = UDim.new(0, 10),
                PaddingRight = UDim.new(0, 10),
                PaddingTop = UDim.new(0, 5),
                PaddingBottom = UDim.new(0, 10),
                Parent = section.ElementsContainer
            })
            
            -- Añadir sección a la lista
            table.insert(tab.Sections, section)
            
            -- Implementación de los métodos para crear elementos como botones, toggles, etc.
            -- AddButton, AddToggle, AddSlider, AddInput, AddParagraph, AddDropdown
            
            -- Por ejemplo, solo para la función AddParagraph como referencia:
            function section:AddParagraph(options)
                options = options or {}
                local paragraph = {
                    Title = options.Title or "Paragraph",
                    Content = options.Content or ""
                }
                
                -- Calcular altura en función del contenido
                local contentLines = #string.split(paragraph.Content, "\n")
                local paragraphHeight = 36 + (contentLines * 20)
                
                -- Contenedor del párrafo
                paragraph.Container = Utility:Create("Frame", {
                    Name = paragraph.Title .. "Paragraph",
                    BackgroundColor3 = NeonUI.Theme.Secondary,
                    BackgroundTransparency = NeonUI.Theme.Transparency, -- Añadir transparencia
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 0, paragraphHeight),
                    Parent = section.ElementsContainer
                })
                
                -- Bordes redondeados
                Utility:Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = paragraph.Container
                })
                
                -- Si es tema lava, añadir efectos
                if window.Theme == "Lava" then
                    -- Gradiente
                    Utility:Create("UIGradient", {
                        Color = ColorSequence.new({
                            ColorSequenceKeypoint.new(0, NeonUI.Theme.Secondary:Lerp(NeonUI.Theme.Primary, 0.3)),
                            ColorSequenceKeypoint.new(0.5, NeonUI.Theme.Secondary),
                            ColorSequenceKeypoint.new(1, NeonUI.Theme.Secondary:Lerp(NeonUI.Theme.Primary, 0.3))
                        }),
                        Rotation = 90,
                        Parent = paragraph.Container
                    })
                    
                    -- Borde sutil
                    Utility:Create("UIStroke", {
                        Color = NeonUI.Theme.Accent,
                        Thickness = 1,
                        Transparency = 0.8,
                        ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
                        Parent = paragraph.Container
                    })
                end
                
                -- Título
                paragraph.TitleLabel = Utility:Create("TextLabel", {
                    Name = "Title",
                    BackgroundTransparency = 1,
                    Position = UDim2.fromOffset(10, 5),
                    Size = UDim2.new(1, -20, 0, 26),
                    Font = NeonUI.Theme.Font,
                    Text = paragraph.Title,
                    TextColor3 = NeonUI.Theme.Text,
                    TextSize = NeonUI.Theme.FontSize,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = paragraph.Container
                })
                
                -- Si es tema lava, añadir gradiente
                if window.Theme == "Lava" then
                    Utility:Create("UIGradient", {
                        Color = ColorSequence.new({
                            ColorSequenceKeypoint.new(0, NeonUI.Theme.Text),
                            ColorSequenceKeypoint.new(1, NeonUI.Theme.Accent)
                        }),
                        Parent = paragraph.TitleLabel
                    })
                end
                
                -- Separador
                paragraph.Separator = Utility:Create("Frame", {
                    Name = "Separator",
                    BackgroundColor3 = window.Theme == "Lava" and NeonUI.Theme.Accent or Color3.fromRGB(60, 60, 60),
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 10, 0, 30),
                    Size = UDim2.new(0, 50, 0, 2),
                    Parent = paragraph.Container
                })
                
                -- Si es tema lava, añadir gradiente al separador
                if window.Theme == "Lava" then
                    local sepGradient = Utility:Create("UIGradient", {
                        Color = ColorSequence.new({
                            ColorSequenceKeypoint.new(0, NeonUI.Theme.Accent),
                            ColorSequenceKeypoint.new(1, NeonUI.Theme.Accent:Lerp(NeonUI.Theme.Text, 0.5))
                        }),
                        Parent = paragraph.Separator
                    })
                    
                    -- Animar separador
                    spawn(function()
                        local offset = 0
                        while paragraph.Separator.Parent do
                            offset = offset + 0.01
                            if offset > 1 then offset = 0 end
                            sepGradient.Offset = Vector2.new(offset, 0)
                            wait(0.03)
                        end
                    end)
                end
                
                -- Contenido
                paragraph.ContentLabel = Utility:Create("TextLabel", {
                    Name = "Content",
                    BackgroundTransparency = 1,
                    Position = UDim2.fromOffset(10, 36),
                    Size = UDim2.new(1, -20, 0, paragraphHeight - 40),
                    Font = NeonUI.Theme.Font,
                    Text = paragraph.Content,
                    TextColor3 = Color3.fromRGB(200, 200, 200),
                    TextSize = NeonUI.Theme.FontSize - 2,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    TextYAlignment = Enum.TextYAlignment.Top,
                    TextWrapped = true,
                    Parent = paragraph.Container
                })
                
                -- Método para actualizar el contenido
                function paragraph:SetContent(content)
                    paragraph.Content = content
                    paragraph.ContentLabel.Text = content
                    
                    -- Recalcular altura
                    local newContentLines = #string.split(content, "\n")
                    local newHeight = 36 + (newContentLines * 20)
                    paragraph.Container.Size = UDim2.new(1, 0, 0, newHeight)
                    paragraph.ContentLabel.Size = UDim2.new(1, -20, 0, newHeight - 40)
                end
                
                -- Añadir a la lista de elementos
                table.insert(section.Elements, paragraph)
                
                return paragraph
            end
            
            -- Aquí se añadirían las demás funciones para crear elementos de UI
            -- (Botones, toggles, sliders, etc.)
            
            return section
        end
        
        -- Obtener elementos por flag
        function tab:GetElement(flag)
            for _, section in ipairs(tab.Sections) do
                for _, element in ipairs(section.Elements) do
                    if element.Flag == flag then
                        return element
                    end
                end
            end
            return nil
        end
        
        return tab
    end
    
    -- Seleccionar tab
    function window:SelectTab(tab)
        if window.CurrentTab == tab then return end
        
        -- Ocultar tab actual si existe
        if window.CurrentTab then
            window.CurrentTab.Container.Visible = false
            Utility:Tween(window.CurrentTab.Button, {BackgroundColor3 = NeonUI.Theme.Primary}, 0.2)
            
            -- Si es tema lava, quitar efectos
            if window.Theme == "Lava" then
                -- Eliminar glows si existen
                if window.CurrentTab.Button:FindFirstChild("Glow") then
                    window.CurrentTab.Button.Glow:Destroy()
                end
                
                -- Restaurar color del texto
                if window.CurrentTab.TitleLabel then
                    window.CurrentTab.TitleLabel.TextColor3 = NeonUI.Theme.Text
                end
                
                -- Restaurar color del icono
                if window.CurrentTab.IconImage then
                    window.CurrentTab.IconImage.ImageColor3 = NeonUI.Theme.Text
                end
            end
        end
        
        -- Mostrar nuevo tab
        window.CurrentTab = tab
        tab.Container.Visible = true
        Utility:Tween(tab.Button, {BackgroundColor3 = window.Theme == "Lava" and NeonUI.Theme.Accent or NeonUI.Theme.Accent}, 0.2)
        
        -- Si es tema lava, añadir efectos
        if window.Theme == "Lava" then
            -- Cambiar color del texto
            if tab.TitleLabel then
                tab.TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            end
            
            -- Cambiar color del icono
            if tab.IconImage then
                tab.IconImage.ImageColor3 = Color3.fromRGB(255, 255, 255)
            end
            
            -- Añadir efecto de brillo
            Utility:CreateGlow(tab.Button, NeonUI.Theme.Glow, 1.2)
        end
    end
    
    -- Obtener elementos por flag
    function window:GetFlag(flag)
        return window.Flags[flag]
    end
    
    -- Guardar configuración
    function window:SaveConfig(name)
        if not name then
            name = "default"
        end
        
        return SaveSystem:SaveSettings(name, window.Flags)
    end
    
    -- Cargar configuración
    function window:LoadConfig(name)
        if not name then
            name = "default"
        end
        
        local config = SaveSystem:LoadSettings(name)
        if not config then return false end
        
        -- Aplicar configuración cargada
        for flag, value in pairs(config) do
            window.Flags[flag] = value
            
            -- Recorrer tabs para encontrar el elemento
            for _, tab in pairs(window.Tabs) do
                local element = tab:GetElement(flag)
                if element and element.Set then
                    element:Set(value)
                end
            end
        end
        
        return true
    end
    
    table.insert(self.Windows, window)
    return window
end

return NeonUI
