--[[
    NeonUI Core - Biblioteca principal con tema Lava
    Desarrollado por: MRX y Claude
    Versión: 3.0
    
    Características:
    - Diseño moderno con tema lava y efectos visuales
    - Estructura modular similar a Fluent UI
    - Soporte completo para dispositivos móviles
    - Sistema de temas personalizables
    - Componentes avanzados con efectos visuales
]]

-- Servicios
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local HttpService = game:GetService("HttpService")

-- Variables locales
local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()
local isMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled

-- Temas de la UI
local Themes = {
    Lava = {
        Name = "Lava",
        bg = {
            top = Color3.fromRGB(15, 15, 15),
            middle = Color3.fromRGB(25, 8, 8),
            bottom = Color3.fromRGB(35, 8, 8),
            dark = Color3.fromRGB(10, 5, 5)
        },
        accent = {
            primary = Color3.fromRGB(255, 65, 10),      -- Naranja lava primario
            secondary = Color3.fromRGB(230, 30, 30),    -- Rojo intenso
            tertiary = Color3.fromRGB(180, 20, 20),     -- Rojo oscuro
            glow = Color3.fromRGB(255, 100, 20),        -- Brillo lava
            ember = Color3.fromRGB(255, 180, 30)        -- Brillo ámbar/chispa
        },
        text = {
            primary = Color3.fromRGB(255, 255, 255),    -- Blanco
            secondary = Color3.fromRGB(220, 220, 220),  -- Gris claro
            disabled = Color3.fromRGB(150, 150, 150)    -- Gris
        },
        status = {
            success = Color3.fromRGB(80, 255, 120),     -- Verde
            warning = Color3.fromRGB(255, 235, 50),     -- Amarillo
            error = Color3.fromRGB(255, 60, 60)         -- Rojo
        }
    },
    Midnight = {
        Name = "Midnight",
        bg = {
            top = Color3.fromRGB(15, 15, 25),
            middle = Color3.fromRGB(8, 8, 25),
            bottom = Color3.fromRGB(8, 8, 35),
            dark = Color3.fromRGB(5, 5, 15)
        },
        accent = {
            primary = Color3.fromRGB(65, 10, 255),      -- Azul primario
            secondary = Color3.fromRGB(30, 30, 230),    -- Azul intenso
            tertiary = Color3.fromRGB(20, 20, 180),     -- Azul oscuro
            glow = Color3.fromRGB(100, 20, 255),        -- Brillo púrpura
            ember = Color3.fromRGB(180, 30, 255)        -- Brillo azul/chispa
        },
        text = {
            primary = Color3.fromRGB(255, 255, 255),    -- Blanco
            secondary = Color3.fromRGB(220, 220, 220),  -- Gris claro
            disabled = Color3.fromRGB(150, 150, 150)    -- Gris
        },
        status = {
            success = Color3.fromRGB(80, 255, 120),     -- Verde
            warning = Color3.fromRGB(255, 235, 50),     -- Amarillo
            error = Color3.fromRGB(255, 60, 60)         -- Rojo
        }
    },
    Neon = {
        Name = "Neon",
        bg = {
            top = Color3.fromRGB(15, 15, 15),
            middle = Color3.fromRGB(10, 12, 15),
            bottom = Color3.fromRGB(8, 10, 12),
            dark = Color3.fromRGB(5, 5, 5)
        },
        accent = {
            primary = Color3.fromRGB(0, 255, 200),      -- Verde neón
            secondary = Color3.fromRGB(0, 200, 255),    -- Azul neón
            tertiary = Color3.fromRGB(20, 100, 180),    -- Azul oscuro
            glow = Color3.fromRGB(0, 255, 220),         -- Brillo verde/azul
            ember = Color3.fromRGB(100, 255, 180)       -- Brillo verde claro
        },
        text = {
            primary = Color3.fromRGB(255, 255, 255),    -- Blanco
            secondary = Color3.fromRGB(220, 220, 220),  -- Gris claro
            disabled = Color3.fromRGB(150, 150, 150)    -- Gris
        },
        status = {
            success = Color3.fromRGB(80, 255, 120),     -- Verde
            warning = Color3.fromRGB(255, 235, 50),     -- Amarillo
            error = Color3.fromRGB(255, 60, 60)         -- Rojo
        }
    }
}

-- Iconos integrados (rbxassetid)
local Icons = {
    home = "9835862639",
    user = "9835868665",
    gear = "9835867929",
    award = "9835865192",
    info = "7743885257",
    alert = "7743824019",
    check = "7733956746",
    x = "7733717447",
    fire = "9482093348",
    flame = "9835870123",
    bolt = "7733679869",
    star = "7734068321",
    heart = "7733718216",
    settings = "7734053495",
    code = "7733944826",
    terminal = "7733794336",
    edit = "7733799486",
    trash = "7733673941"
}

-- Utilidades
local Utility = {}

-- Crear objetos con propiedades
function Utility:Create(instance, properties, children)
    local object = Instance.new(instance)
    
    for property, value in pairs(properties or {}) do
        object[property] = value
    end
    
    for _, child in ipairs(children or {}) do
        child.Parent = object
    end
    
    return object
end

-- Crear Tween
function Utility:Tween(instance, properties, duration, style, direction)
    style = style or Enum.EasingStyle.Quad
    direction = direction or Enum.EasingDirection.Out
    
    local tween = TweenService:Create(
        instance, 
        TweenInfo.new(duration, style, direction), 
        properties
    )
    tween:Play()
    return tween
end

-- Ripple Effect (efecto de onda al hacer clic)
function Utility:Ripple(instance, color)
    spawn(function()
        color = color or Color3.fromRGB(255, 255, 255)
        
        local ripple = self:Create("Frame", {
            Name = "Ripple",
            AnchorPoint = Vector2.new(0.5, 0.5),
            BackgroundColor3 = color,
            BackgroundTransparency = 0.7,
            Position = UDim2.fromOffset(Mouse.X - instance.AbsolutePosition.X, Mouse.Y - instance.AbsolutePosition.Y),
            Size = UDim2.fromScale(0, 0),
            ZIndex = 2,
            Parent = instance
        })
        
        local corner = self:Create("UICorner", {
            CornerRadius = UDim.new(1, 0),
            Parent = ripple
        })
        
        local targetSize = UDim2.fromScale(2, 2)
        self:Tween(ripple, {Size = targetSize, BackgroundTransparency = 1}, 0.5)
        
        task.delay(0.5, function()
            ripple:Destroy()
        end)
    end)
end

-- Arrastrar elementos
function Utility:MakeDraggable(frame, dragui)
    local dragging, dragInput, dragStart, startPos
    
    local function updateDrag(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    dragui.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    dragui.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            updateDrag(input)
        end
    end)
end

-- Sistema de efectos visuales
local Effects = {}

-- Crear efecto de resplandor
function Effects:CreateGlow(parent, color, size, zIndex, transparency)
    color = color or Themes.Lava.accent.glow
    size = size or 1.5
    zIndex = zIndex or (parent.ZIndex - 1)
    transparency = transparency or 0.7
    
    local glow = Utility:Create("ImageLabel", {
        Name = "Glow",
        BackgroundTransparency = 1,
        Image = "rbxassetid://5028857084", -- Imagen de resplandor circular
        ImageColor3 = color,
        ImageTransparency = transparency,
        ZIndex = zIndex,
        Parent = parent
    })
    
    -- Calcular tamaño del resplandor
    local parentSize = parent.AbsoluteSize
    glow.Size = UDim2.new(1, parentSize.X * (size - 1), 1, parentSize.Y * (size - 1))
    glow.Position = UDim2.new(0.5, -parentSize.X * (size - 1)/2, 0.5, -parentSize.Y * (size - 1)/2)
    glow.AnchorPoint = Vector2.new(0.5, 0.5)
    
    -- Animar el resplandor
    spawn(function()
        local pulseSpeed = 0.05
        local minTrans = transparency
        local maxTrans = minTrans + 0.2
        
        while glow.Parent do
            for i = minTrans, maxTrans, pulseSpeed do
                if not glow or not glow.Parent then break end
                glow.ImageTransparency = i
                wait(0.05)
            end
            for i = maxTrans, minTrans, -pulseSpeed do
                if not glow or not glow.Parent then break end
                glow.ImageTransparency = i
                wait(0.05)
            end
        end
    end)
    
    return glow
end

-- Crear efecto de partículas
function Effects:CreateParticles(parent, color, count, size, speed)
    color = color or Themes.Lava.accent.glow
    count = count or 15
    local minSize = (size and size[1]) or 2
    local maxSize = (size and size[2]) or 5
    speed = speed or 0.5
    
    local container = Utility:Create("Frame", {
        Name = "ParticleContainer",
        BackgroundTransparency = 1,
        Size = UDim2.fromScale(1, 1),
        ClipsDescendants = true,
        ZIndex = parent.ZIndex,
        Parent = parent
    })
    
    for i = 1, count do
        local particle = Utility:Create("Frame", {
            Name = "Particle_" .. i,
            BorderSizePixel = 0,
            BackgroundColor3 = color,
            Size = UDim2.fromOffset(math.random(minSize, maxSize), math.random(minSize, maxSize)),
            Position = UDim2.fromScale(math.random(), math.random()),
            Parent = container
        })
        
        -- Hacer redondo
        Utility:Create("UICorner", {
            CornerRadius = UDim.new(1, 0),
            Parent = particle
        })
        
        -- Animar partícula
        spawn(function()
            local offsetY = 0
            local randSpeed = math.random(speed * 50, speed * 150) / 100
            local randX = math.random(-20, 20) / 100
            
            while particle.Parent do
                -- Movimiento ascendente
                offsetY = offsetY - 0.01 * randSpeed
                local newPosY = (particle.Position.Y.Scale + offsetY) % 1
                local newPosX = (particle.Position.X.Scale + math.sin(offsetY * 3) * randX) % 1
                
                -- Actualizar posición
                particle.Position = UDim2.fromScale(newPosX, newPosY)
                
                -- Parpadeo sutil
                particle.BackgroundTransparency = 0.2 + (math.sin(offsetY * 10) + 1) / 10
                
                wait()
            end
        end)
    end
    
    return container
end

-- Crear efecto de lava burbujeante en el fondo
function Effects:CreateLavaBackground(parent, theme)
    theme = theme or Themes.Lava
    
    local bgFrame = Utility:Create("Frame", {
        Name = "LavaBackground",
        BackgroundColor3 = theme.bg.dark,
        BorderSizePixel = 0,
        Size = UDim2.fromScale(1, 1),
        ZIndex = parent.ZIndex,
        ClipsDescendants = true,
        Parent = parent
    })
    
    -- Asegurar esquinas perfectas copiando las del padre
    if parent:FindFirstChild("UICorner") then
        local parentCorner = parent:FindFirstChild("UICorner")
        local bgCorner = parentCorner:Clone()
        bgCorner.Parent = bgFrame
    end
    
    -- Gradient de fondo mejorado
    local gradient = Utility:Create("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, theme.bg.top),
            ColorSequenceKeypoint.new(0.3, theme.bg.middle:Lerp(theme.bg.dark, 0.3)),
            ColorSequenceKeypoint.new(0.7, theme.bg.middle:Lerp(theme.accent.tertiary, 0.2)),
            ColorSequenceKeypoint.new(1, theme.bg.bottom)
        }),
        Rotation = 90,
        Parent = bgFrame
    })
    
    -- Añadir borde interior brillante
    local innerBorder = Utility:Create("UIStroke", {
        Name = "InnerGlow",
        Color = theme.accent.primary,
        Thickness = 1,
        Transparency = 0.7,
        ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
        Parent = bgFrame
    })
    
    -- Animar el borde interno
    spawn(function()
        while innerBorder.Parent do
            for i = 0.7, 0.4, -0.02 do
                if not innerBorder or not innerBorder.Parent then break end
                innerBorder.Transparency = i
                wait(0.05)
            end
            for i = 0.4, 0.7, 0.02 do
                if not innerBorder or not innerBorder.Parent then break end
                innerBorder.Transparency = i
                wait(0.05)
            end
        end
    end)
    
    -- Animar gradiente sutilmente
    spawn(function()
        local offset = 0
        while gradient.Parent do
            offset = offset + 0.01
            local intensity = (math.sin(offset) + 1) / 4
            
            gradient.Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, theme.bg.top),
                ColorSequenceKeypoint.new(0.4, theme.bg.middle:Lerp(theme.accent.tertiary, intensity * 0.2)),
                ColorSequenceKeypoint.new(1, theme.bg.bottom:Lerp(theme.accent.tertiary, intensity * 0.3))
            })
            
            wait(0.05)
        end
    end)
    
    -- Crear partículas de lava
    Effects:CreateParticles(bgFrame, theme.accent.primary, 10, {3, 6}, 0.3)
    
    -- Crear burbujas de lava
    local numBlobs = 5
    for i = 1, numBlobs do
        local size = math.random(50, 120)
        local blob = Utility:Create("Frame", {
            Name = "LavaBlob_" .. i,
            Size = UDim2.fromOffset(size, size),
            Position = UDim2.fromScale(math.random(), 0.8 + math.random() * 0.4),
            BackgroundColor3 = theme.accent.tertiary:Lerp(theme.accent.primary, math.random(30, 70)/100),
            BackgroundTransparency = 0.6,
            BorderSizePixel = 0,
            ZIndex = bgFrame.ZIndex + 1,
            Parent = bgFrame
        })
        
        -- Hacer orgánico con esquinas redondeadas
        Utility:Create("UICorner", {
            CornerRadius = UDim.new(1, 0),
            Parent = blob
        })
        
        -- Efecto de gradiente radial para sensación 3D
        Utility:Create("UIGradient", {
            Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, theme.accent.primary:Lerp(Color3.new(1,1,1), 0.2)),
                ColorSequenceKeypoint.new(0.7, blob.BackgroundColor3),
                ColorSequenceKeypoint.new(1, theme.accent.tertiary:Lerp(Color3.new(0,0,0), 0.3))
            }),
            Transparency = NumberSequence.new({
                NumberSequenceKeypoint.new(0, 0.4),
                NumberSequenceKeypoint.new(0.7, 0.6),
                NumberSequenceKeypoint.new(1, 0.95)
            }),
            Parent = blob
        })
        
        -- Animar blob
        spawn(function()
            local speed = math.random(5, 15) / 1000
            local wobbleSpeed = math.random(5, 20) / 10
            local wobbleIntensity = math.random(5, 15) / 100
            local posY = blob.Position.Y.Scale
            local posX = blob.Position.X.Scale
            local time = 0
            
            while blob.Parent do
                time = time + 0.016
                
                -- Movimiento ascendente con wobble
                posY = posY - speed
                if posY < -0.2 then posY = 1.2 end
                
                local wobbleX = math.sin(time * wobbleSpeed) * wobbleIntensity
                
                blob.Position = UDim2.fromScale(posX + wobbleX, posY)
                
                -- Pulsación de la burbuja
                local pulseScale = 1 + math.sin(time * 2) * 0.05
                blob.Size = UDim2.fromOffset(size * pulseScale, size * pulseScale)
                
                wait()
            end
        end)
    end
    
    return bgFrame
end

-- Sistema de notificaciones
local NotificationSystem = {}

function NotificationSystem:Notify(parent, title, content, duration, type)
    parent = parent or game:GetService("CoreGui")
    duration = duration or 3
    type = type or "info" -- info, success, warning, error
    
    -- Elegir color según el tipo
    local colors = Themes.Lava.status
    local color
    
    if type == "success" then
        color = colors.success
    elseif type == "warning" then
        color = colors.warning
    elseif type == "error" then
        color = colors.error
    else
        color = Themes.Lava.accent.primary
    end
    
    -- Crear notificación
    local notification = Utility:Create("Frame", {
        Name = "Notification",
        BackgroundColor3 = Themes.Lava.bg.dark,
        BorderSizePixel = 0,
        Position = UDim2.new(1, 10, 0.8, 0),
        Size = UDim2.new(0, 300, 0, 90),
        Parent = parent,
        AnchorPoint = Vector2.new(1, 1),
        ZIndex = 100
    })
    
    -- Añadir redondeado
    Utility:Create("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = notification
    })
    
    -- Barra de color
    local colorBar = Utility:Create("Frame", {
        Name = "ColorBar",
        BackgroundColor3 = color,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(0, 5, 1, 0),
        ZIndex = 101,
        Parent = notification
    })
    
    -- Redondear solo los bordes izquierdos de la barra de color
    Utility:Create("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = colorBar
    })
    
    -- Corregir para que solo redondee a la izquierda
    Utility:Create("Frame", {
        Name = "Fix",
        BackgroundColor3 = color,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, 0, 0, 0),
        Size = UDim2.new(0.5, 0, 1, 0),
        ZIndex = 101,
        Parent = colorBar
    })
    
    -- Título con gradiente
    local notifTitle = Utility:Create("TextLabel", {
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.fromOffset(15, 10),
        Size = UDim2.new(1, -30, 0, 25),
        Font = Enum.Font.GothamBold,
        Text = title,
        TextColor3 = Themes.Lava.text.primary,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 102,
        Parent = notification
    })
    
    -- Gradiente para el título
    Utility:Create("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Themes.Lava.text.primary),
            ColorSequenceKeypoint.new(1, color)
        }),
        Parent = notifTitle
    })
    
    -- Contenido
    Utility:Create("TextLabel", {
        Name = "Content",
        BackgroundTransparency = 1,
        Position = UDim2.fromOffset(15, 40),
        Size = UDim2.new(1, -30, 0, 40),
        Font = Enum.Font.Gotham,
        Text = content,
        TextColor3 = Themes.Lava.text.secondary,
        TextSize = 14,
        TextWrapped = true,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Top,
        ZIndex = 102,
        Parent = notification
    })
    
    -- Barra de progreso
    local progressBar = Utility:Create("Frame", {
        Name = "ProgressBar",
        BackgroundColor3 = color,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 1, -2),
        Size = UDim2.new(1, 0, 0, 2),
        ZIndex = 101,
        Parent = notification
    })
    
    -- Animación de entrada
    notification.Position = UDim2.new(1, 300, 0.8, 0)
    local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
    local tweenIn = TweenService:Create(notification, tweenInfo, {
        Position = UDim2.new(1, -20, 0.8, 0)
    })
    tweenIn:Play()
    
    -- Animación de la barra de progreso
    local progressTween = TweenService:Create(progressBar, TweenInfo.new(duration, Enum.EasingStyle.Linear), {
        Size = UDim2.new(0, 0, 0, 2)
    })
    progressTween:Play()
    
    -- Temporizador para eliminar
    delay(duration, function()
        local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.In)
        local tweenOut = TweenService:Create(notification, tweenInfo, {
            Position = UDim2.new(1, 300, 0.8, 0)
        })
        tweenOut:Play()
        tweenOut.Completed:Connect(function()
            notification:Destroy()
        end)
    end)
    
    -- Agregar funcionalidad de click para cerrar
    notification.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quint, Enum.EasingDirection.In)
            local tweenOut = TweenService:Create(notification, tweenInfo, {
                Position = UDim2.new(1, 300, 0.8, 0)
            })
            tweenOut:Play()
            tweenOut.Completed:Connect(function()
                notification:Destroy()
            end)
        end
    end)
    
    return notification
end

-- Sistema de guardado
local SaveSystem = {}

-- Generar ID único 
function SaveSystem:GenerateUID()
    local template = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx"
    return string.gsub(template, "[xy]", function (c)
        local v = (c == "x") and math.random(0, 0xf) or math.random(8, 0xb)
        return string.format("%x", v)
    end)
end

-- Guardar configuración
function SaveSystem:SaveSettings(name, settings)
    if not name then return false end
    
    local success, result = pcall(function()
        return HttpService:JSONEncode(settings)
    end)
    
    if success then
        if writefile then
            local folderPath = "NeonUI/"
            local fileName = folderPath .. name .. ".json"
            
            if not isfolder(folderPath) then
                makefolder(folderPath)
            end
            
            writefile(fileName, result)
            return true
        end
    end
    
    return false
end

-- Cargar configuración
function SaveSystem:LoadSettings(name)
    if not name then return nil end
    
    local folderPath = "NeonUI/"
    local fileName = folderPath .. name .. ".json"
    
    if readfile and isfile and isfile(fileName) then
        local success, result = pcall(function()
            return HttpService:JSONDecode(readfile(fileName))
        end)
        
        if success then
            return result
        end
    end
    
    return nil
end

-- NeonUI principal
local NeonUI = {
    Windows = {},
    Theme = Themes.Lava,
    Flags = {},
    Version = "3.0"
}

-- Inicialización de la UI
function NeonUI:Init()
    -- Verificar si ya existe una UI abierta
    if _G.NeonUIObject then
        _G.NeonUIObject:Destroy()
    end
    
    -- Crear ScreenGui principal
    self.ScreenGui = Utility:Create("ScreenGui", {
        Name = "NeonUIScreenGui",
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        DisplayOrder = 100,
        IgnoreGuiInset = true
    })
    
    -- Proteger GUI si es posible
    if syn and syn.protect_gui then
        syn.protect_gui(self.ScreenGui)
        self.ScreenGui.Parent = CoreGui
    elseif gethui then
        self.ScreenGui.Parent = gethui()
    else
        self.ScreenGui.Parent = Player.PlayerGui
    end
    
    _G.NeonUIObject = self.ScreenGui
    
    -- Mostrar notificación de inicio
    NotificationSystem:Notify(
        self.ScreenGui,
        "NEON RB v" .. self.Version,
        "Biblioteca inicializada correctamente.",
        3,
        "success"
    )
    
    return self
end

-- Crear ventana
function NeonUI:CreateWindow(options)
    options = options or {}
    
    local window = {
        Title = options.Title or "NEON RB " .. self.Version,
        SubTitle = options.SubTitle or "By MRX",
        ThemeName = options.Theme or "Lava",
        Size = options.Size or UDim2.fromOffset(500, 350),
        Position = options.Position or UDim2.fromScale(0.5, 0.5),
        MinimizeKey = options.MinimizeKey,
        Tabs = {},
        Elements = {},
        CurrentTab = nil,
        Flags = {},
        Minimized = false
    }
    
    -- Seleccionar tema
    self.Theme = Themes[window.ThemeName] or Themes.Lava
    
    -- Crear el frame principal de la ventana
    window.Frame = Utility:Create("Frame", {
        Name = "WindowFrame",
        BackgroundColor3 = self.Theme.bg.dark,
        BorderSizePixel = 0,
        Position = UDim2.new(window.Position.X.Scale, window.Position.X.Offset - window.Size.X.Offset/2, 
                            window.Position.Y.Scale, window.Position.Y.Offset - window.Size.Y.Offset/2),
        Size = window.Size,
        ClipsDescendants = true,
        Active = true,
        Parent = self.ScreenGui,
        ZIndex = 10
    })
    
    -- Esquinas redondeadas
    Utility:Create("UICorner", {
        CornerRadius = UDim.new(0, 12),
        Parent = window.Frame
    })
    
    -- Crear fondo de lava
    Effects:CreateLavaBackground(window.Frame, self.Theme)
    
    -- Crear barra de título
    window.TitleBar = Utility:Create("Frame", {
        Name = "TitleBar",
        BackgroundColor3 = self.Theme.accent.tertiary,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 40),
        Parent = window.Frame,
        ZIndex = 12
    })
    
    -- Esquinas de la barra de título
    Utility:Create("UICorner", {
        CornerRadius = UDim.new(0, 12),
        Parent = window.TitleBar
    })
    
    -- Solución para las esquinas inferiores
    Utility:Create("Frame", {
        Name = "BottomFixFrame",
        BackgroundColor3 = window.TitleBar.BackgroundColor3,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 1, -12),
        Size = UDim2.new(1, 0, 0, 12),
        ZIndex = window.TitleBar.ZIndex,
        Parent = window.TitleBar
    })
    
    -- Gradiente para la barra de título
    local titleGradient = Utility:Create("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, self.Theme.accent.tertiary:Lerp(self.Theme.accent.secondary, 0.3)),
            ColorSequenceKeypoint.new(0.3, self.Theme.accent.secondary:Lerp(self.Theme.accent.primary, 0.2)),
            ColorSequenceKeypoint.new(0.7, self.Theme.accent.secondary),
            ColorSequenceKeypoint.new(1, self.Theme.accent.tertiary:Lerp(self.Theme.accent.secondary, 0.3))
        }),
        Parent = window.TitleBar
    })
    
    -- Animar el gradiente
    spawn(function()
        local offset = 0
        while window.TitleBar and window.TitleBar.Parent do
            offset = offset + 0.005
            if offset > 1 then offset = 0 end
            titleGradient.Offset = Vector2.new(offset, 0)
            wait(0.01)
        end
    end)
    
    -- Texto del título
    window.TitleText = Utility:Create("TextLabel", {
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.fromOffset(15, 0),
        Size = UDim2.new(1, -120, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = "🌋 " .. window.Title,
        TextColor3 = self.Theme.text.primary,
        TextSize = 18,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 13,
        Parent = window.TitleBar
    })
    
    -- Botón de cerrar
    window.CloseButton = Utility:Create("TextButton", {
        Name = "CloseButton",
        BackgroundColor3 = self.Theme.status.error,
        Position = UDim2.new(1, -35, 0.5, -11),
        Size = UDim2.new(0, 22, 0, 22),
        Font = Enum.Font.GothamBold,
        Text = "X",
        TextColor3 = self.Theme.text.primary,
        TextSize = 14,
        AutoButtonColor = false,
        ZIndex = 13,
        Parent = window.TitleBar
    })
    
    -- Redondear botón
    Utility:Create("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = window.CloseButton
    })
    
    -- Botón de minimizar
    window.MinimizeButton = Utility:Create("TextButton", {
        Name = "MinimizeButton",
        BackgroundColor3 = self.Theme.accent.tertiary,
        Position = UDim2.new(1, -67, 0.5, -11),
        Size = UDim2.new(0, 22, 0, 22),
        Font = Enum.Font.GothamBold,
        Text = "-",
        TextColor3 = self.Theme.text.primary,
        TextSize = 18,
        AutoButtonColor = false,
        ZIndex = 13,
        Parent = window.TitleBar
    })
    
    -- Redondear botón
    Utility:Create("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = window.MinimizeButton
    })
    
    -- Efectos de botones
    window.CloseButton.MouseEnter:Connect(function()
        Utility:Tween(window.CloseButton, {
            BackgroundColor3 = self.Theme.status.error:Lerp(Color3.new(1,1,1), 0.2),
            Size = UDim2.new(0, 24, 0, 24),
            Position = UDim2.new(1, -36, 0.5, -12)
        }, 0.3)
    end)
    
    window.CloseButton.MouseLeave:Connect(function()
        Utility:Tween(window.CloseButton, {
            BackgroundColor3 = self.Theme.status.error,
            Size = UDim2.new(0, 22, 0, 22),
            Position = UDim2.new(1, -35, 0.5, -11)
        }, 0.3)
    end)
    
    window.MinimizeButton.MouseEnter:Connect(function()
        Utility:Tween(window.MinimizeButton, {
            BackgroundColor3 = self.Theme.accent.tertiary:Lerp(Color3.new(1,1,1), 0.2),
            Size = UDim2.new(0, 24, 0, 24),
            Position = UDim2.new(1, -68, 0.5, -12)
        }, 0.3)
    end)
    
    window.MinimizeButton.MouseLeave:Connect(function()
        Utility:Tween(window.MinimizeButton, {
            BackgroundColor3 = self.Theme.accent.tertiary,
            Size = UDim2.new(0, 22, 0, 22),
            Position = UDim2.new(1, -67, 0.5, -11)
        }, 0.3)
    end)
    
    -- Funcionalidad de los botones
    window.CloseButton.MouseButton1Click:Connect(function()
        Utility:Tween(window.Frame, {
            Size = UDim2.fromOffset(0, 0),
            Position = UDim2.new(window.Position.X.Scale, window.Position.X.Offset, 
                               window.Position.Y.Scale, window.Position.Y.Offset)
        }, 0.5, Enum.EasingStyle.Back, Enum.EasingDirection.In)
        
        wait(0.5)
        if self.ScreenGui then
            self.ScreenGui:Destroy()
            _G.NeonUIObject = nil
        end
    end)
    
    window.MinimizeButton.MouseButton1Click:Connect(function()
        window:Minimize()
    end)
    
    -- Contenedor de tabs
    window.TabContainer = Utility:Create("Frame", {
        Name = "TabContainer",
        BackgroundColor3 = self.Theme.bg.dark,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 40),
        Size = UDim2.new(0, 120, 1, -40),
        ZIndex = 11,
        Parent = window.Frame
    })
    
    -- ScrollFrame para los tabs
    window.TabScroll = Utility:Create("ScrollingFrame", {
        Name = "TabScroll",
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 5),
        Size = UDim2.new(1, 0, 1, -10),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = self.Theme.accent.primary,
        ZIndex = 11,
        Parent = window.TabContainer
    })
    
    -- Layout para los tabs
    local tabsLayout = Utility:Create("UIListLayout", {
        FillDirection = Enum.FillDirection.Vertical,
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 10),
        Parent = window.TabScroll
    })
    
    -- Padding para los tabs
    Utility:Create("UIPadding", {
        PaddingTop = UDim.new(0, 10),
        Parent = window.TabScroll
    })
    
    -- Actualizar CanvasSize automáticamente
    tabsLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        window.TabScroll.CanvasSize = UDim2.new(0, 0, 0, tabsLayout.AbsoluteContentSize.Y + 20)
    end)
    
    -- Contenedor de contenido
    window.ContentContainer = Utility:Create("Frame", {
        Name = "ContentContainer",
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 120, 0, 40),
        Size = UDim2.new(1, -120, 1, -40),
        ZIndex = 11,
        Parent = window.Frame
    })
    
    -- Hacer arrastrable
    Utility:MakeDraggable(window.Frame, window.TitleBar)
    
    -- Métodos de ventana
    
    -- Minimizar ventana
    function window:Minimize()
        if self.Minimized then
            -- Maximizar
            self.Minimized = false
            
            Utility:Tween(self.Frame, {
                Size = window.Size
            }, 0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
        else
            -- Minimizar
            self.Minimized = true
            
            Utility:Tween(self.Frame, {
                Size = UDim2.new(window.Size.X.Scale, window.Size.X.Offset, 0, 40)
            }, 0.5, Enum.EasingStyle.Back, Enum.EasingDirection.In)
        end
    end
    
    -- Añadir pestaña
    function window:AddTab(options)
        options = options or {}
        local tab = {
            Name = options.Title or "Tab",
            Icon = options.Icon,
            Sections = {},
            Elements = {},
            Visible = false,
            Order = options.Order or (#self.Tabs + 1)
        }
        
        -- Botón del tab
        tab.Button = Utility:Create("TextButton", {
            Name = tab.Name .. "Tab",
            BackgroundColor3 = NeonUI.Theme.bg.dark:Lerp(NeonUI.Theme.accent.tertiary, 0.1),
            BackgroundTransparency = 0.2,
            BorderSizePixel = 0,
            Size = UDim2.new(0, 110, 0, 42),
            Font = Enum.Font.GothamBold,
            Text = tab.Name,
            TextColor3 = NeonUI.Theme.text.secondary,
            TextSize = 14,
            AutoButtonColor = false,
            LayoutOrder = tab.Order,
            ZIndex = 12,
            Parent = self.TabScroll
        })
        
        -- Esquinas redondeadas
        Utility:Create("UICorner", {
            CornerRadius = UDim.new(0, 8),
            Parent = tab.Button
        })
        
        -- Efecto de borde
        tab.Border = Utility:Create("UIStroke", {
            Color = NeonUI.Theme.accent.tertiary,
            Thickness = 1,
            Transparency = 0.7,
            Parent = tab.Button
        })
        
        -- Icono (si se proporciona)
        if tab.Icon then
            -- Container para el icono
            local iconHolder = Utility:Create("Frame", {
                Name = "IconHolder",
                BackgroundColor3 = NeonUI.Theme.accent.tertiary,
                BackgroundTransparency = 0.8,
                Position = UDim2.new(0, 10, 0.5, -12),
                Size = UDim2.new(0, 24, 0, 24),
                ZIndex = 13,
                Parent = tab.Button
            })
            
            -- Redondear el holder
            Utility:Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = iconHolder
            })
            
            -- Icono
            tab.Icon = Utility:Create("ImageLabel", {
                Name = "Icon",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 2, 0, 2),
                Size = UDim2.new(0, 20, 0, 20),
                Image = "rbxassetid://" .. (type(options.Icon) == "string" and (Icons[options.Icon] or options.Icon) or "9835862639"),
                ImageColor3 = NeonUI.Theme.text.secondary,
                ZIndex = 14,
                Parent = iconHolder
            })
            
            -- Ajustar texto
            tab.Button.TextXAlignment = Enum.TextXAlignment.Right
            tab.Button.Text = tab.Name .. "      "
        end
        
        -- Indicador de selección
        tab.SelectionIndicator = Utility:Create("Frame", {
            Name = "SelectionIndicator",
            BackgroundColor3 = NeonUI.Theme.accent.primary,
            BorderSizePixel = 0,
            Position = UDim2.new(0, -2, 0.5, -15),
            Size = UDim2.new(0, 4, 0, 30),
            Visible = false,
            ZIndex = 13,
            Parent = tab.Button
        })
        
        -- Esquinas redondeadas para el indicador
        Utility:Create("UICorner", {
            CornerRadius = UDim.new(0, 2),
            Parent = tab.SelectionIndicator
        })
        
        -- Resplandor para el indicador
        Effects:CreateGlow(tab.SelectionIndicator, NeonUI.Theme.accent.primary, 2, 12, 0.7)
        
        -- Crear contenedor de página
        tab.Page = Utility:Create("ScrollingFrame", {
            Name = tab.Name .. "Page",
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 10, 0, 10),
            Size = UDim2.new(1, -20, 1, -20),
            CanvasSize = UDim2.new(0, 0, 0, 0),
            ScrollBarThickness = 4,
            ScrollingDirection = Enum.ScrollingDirection.Y,
            ScrollBarImageColor3 = NeonUI.Theme.accent.primary,
            Visible = false,
            ZIndex = 12,
            Parent = self.ContentContainer
        })
        
        -- Layout para elementos
        local pageLayout = Utility:Create("UIListLayout", {
            FillDirection = Enum.FillDirection.Vertical,
            HorizontalAlignment = Enum.HorizontalAlignment.Center,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 10),
            Parent = tab.Page
        })
        
        -- Padding
        Utility:Create("UIPadding", {
            PaddingTop = UDim.new(0, 10),
            PaddingBottom = UDim.new(0, 10),
            PaddingLeft = UDim.new(0, 5),
            PaddingRight = UDim.new(0, 5),
            Parent = tab.Page
        })
        
        -- Actualizar CanvasSize automáticamente
        pageLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            tab.Page.CanvasSize = UDim2.new(0, 0, 0, pageLayout.AbsoluteContentSize.Y + 20)
        end)
        
        -- Evento de hover
        tab.Button.MouseEnter:Connect(function()
            if self.CurrentTab and self.CurrentTab.Name == tab.Name then return end
            
            Utility:Tween(tab.Button, {
                BackgroundColor3 = NeonUI.Theme.bg.dark:Lerp(NeonUI.Theme.accent.tertiary, 0.3),
                BackgroundTransparency = 0,
                TextColor3 = NeonUI.Theme.text.primary
            }, 0.3)
            
            Utility:Tween(tab.Border, {
                Color = NeonUI.Theme.accent.primary,
                Transparency = 0.5
            }, 0.3)
            
            if tab.Icon and tab.Icon.Parent then
                Utility:Tween(tab.Icon.Parent, {
                    BackgroundColor3 = NeonUI.Theme.accent.primary,
                    BackgroundTransparency = 0.7
                }, 0.3)
                
                Utility:Tween(tab.Icon, {
                    ImageColor3 = NeonUI.Theme.text.primary
                }, 0.3)
            end
        end)
        
        tab.Button.MouseLeave:Connect(function()
            if self.CurrentTab and self.CurrentTab.Name == tab.Name then return end
            
            Utility:Tween(tab.Button, {
                BackgroundColor3 = NeonUI.Theme.bg.dark:Lerp(NeonUI.Theme.accent.tertiary, 0.1),
                BackgroundTransparency = 0.2,
                TextColor3 = NeonUI.Theme.text.secondary
            }, 0.3)
            
            Utility:Tween(tab.Border, {
                Color = NeonUI.Theme.accent.tertiary,
                Transparency = 0.7
            }, 0.3)
            
            if tab.Icon and tab.Icon.Parent then
                Utility:Tween(tab.Icon.Parent, {
                    BackgroundColor3 = NeonUI.Theme.accent.tertiary,
                    BackgroundTransparency = 0.8
                }, 0.3)
                
                Utility:Tween(tab.Icon, {
                    ImageColor3 = NeonUI.Theme.text.secondary
                }, 0.3)
            end
        end)
        
        -- Evento de click
        tab.Button.MouseButton1Click:Connect(function()
            self:SelectTab(tab.Name)
        end)
        
        -- Métodos del tab
        function tab:AddSection(options)
            options = options or {}
            local section = {
                Title = options.Title or "Section",
                Elements = {}
            }
            
            -- Contenedor de sección
            section.Container = Utility:Create("Frame", {
                Name = section.Title .. "Section",
                BackgroundColor3 = NeonUI.Theme.bg.dark:Lerp(NeonUI.Theme.accent.tertiary, 0.1),
                BackgroundTransparency = 0.1,
                BorderSizePixel = 0,
                Size = UDim2.new(1, -10, 0, 36),
                ZIndex = 13,
                Parent = tab.Page
            })
            
            -- Esquinas redondeadas
            Utility:Create("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = section.Container
            })
            
            -- Borde brillante
            Utility:Create("UIStroke", {
                Color = NeonUI.Theme.accent.primary,
                Transparency = 0.7,
                Thickness = 1.5,
                Parent = section.Container
            })
            
            -- Título
            section.TitleLabel = Utility:Create("TextLabel", {
                Name = "Title",
                BackgroundTransparency = 1,
                Position = UDim2.fromOffset(14, 10),
                Size = UDim2.new(1, -120, 0, 24),
                Font = Enum.Font.GothamBold,
                Text = section.Title,
                TextColor3 = NeonUI.Theme.text.primary,
                TextSize = 16,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 14,
                Parent = section.Container
            })
            
            -- Gradiente para el título
            Utility:Create("UIGradient", {
                Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, NeonUI.Theme.text.primary),
                    ColorSequenceKeypoint.new(1, NeonUI.Theme.accent.primary)
                }),
                Parent = section.TitleLabel
            })
            
            -- Métodos de la sección
            function section:AddButton(title, description, callback)
                callback = callback or function() end
                
                local button = {
                    Title = title or "Button",
                    Description = description,
                    Callback = callback
                }
                
                -- Calcular altura del botón basado en descripción
                local buttonHeight = description and 80 or 60
                
                -- Contenedor del botón
                button.Container = Utility:Create("Frame", {
                    Name = "Button_" .. title,
                    BackgroundColor3 = NeonUI.Theme.bg.dark:Lerp(NeonUI.Theme.accent.tertiary, 0.1),
                    BackgroundTransparency = 0.1,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, -10, 0, buttonHeight),
                    ZIndex = 13,
                    Parent = tab.Page
                })
                
                -- Esquinas redondeadas
                Utility:Create("UICorner", {
                    CornerRadius = UDim.new(0, 8),
                    Parent = button.Container
                })
                
                -- Borde brillante
                Utility:Create("UIStroke", {
                    Color = NeonUI.Theme.accent.primary,
                    Transparency = 0.7,
                    Thickness = 1.5,
                    Parent = button.Container
                })
                
                -- Título
                button.TitleLabel = Utility:Create("TextLabel", {
                    Name = "Title",
                    BackgroundTransparency = 1,
                    Position = UDim2.fromOffset(14, 10),
                    Size = UDim2.new(1, -120, 0, 24),
                    Font = Enum.Font.GothamBold,
                    Text = button.Title,
                    TextColor3 = NeonUI.Theme.text.primary,
                    TextSize = 16,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    ZIndex = 14,
                    Parent = button.Container
                })
                
                -- Gradiente para el título
                Utility:Create("UIGradient", {
                    Color = ColorSequence.new({
                        ColorSequenceKeypoint.new(0, NeonUI.Theme.text.primary),
                        ColorSequenceKeypoint.new(1, NeonUI.Theme.accent.primary)
                    }),
                    Parent = button.TitleLabel
                })
                
                -- Descripción
                if description and description ~= "" then
                    button.DescriptionLabel = Utility:Create("TextLabel", {
                        Name = "Description",
                        BackgroundTransparency = 1,
                        Position = UDim2.fromOffset(14, 38),
                        Size = UDim2.new(1, -120, 0, 34),
                        Font = Enum.Font.Gotham,
                        Text = description,
                        TextColor3 = NeonUI.Theme.text.secondary,
                        TextSize = 14,
                        TextWrapped = true,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        TextYAlignment = Enum.TextYAlignment.Top,
                        ZIndex = 14,
                        Parent = button.Container
                    })
                end
                
                -- Botón clickeable
                button.ClickButton = Utility:Create("TextButton", {
                    Name = "ClickButton",
                    BackgroundColor3 = NeonUI.Theme.accent.tertiary,
                    Position = UDim2.new(1, -110, 0.5, -22),
                    Size = UDim2.new(0, 90, 0, 44),
                    Font = Enum.Font.GothamBold,
                    Text = "CLICK",
                    TextColor3 = NeonUI.Theme.text.primary,
                    TextSize = 16,
                    AutoButtonColor = false,
                    ZIndex = 14,
                    Parent = button.Container
                })
                
                -- Esquinas redondeadas
                Utility:Create("UICorner", {
                    CornerRadius = UDim.new(0, 8),
                    Parent = button.ClickButton
                })
                
                -- Gradiente para el botón
                local clickGradient = Utility:Create("UIGradient", {
                    Color = ColorSequence.new({
                        ColorSequenceKeypoint.new(0, NeonUI.Theme.accent.tertiary),
                        ColorSequenceKeypoint.new(0.5, NeonUI.Theme.accent.tertiary:Lerp(NeonUI.Theme.accent.secondary, 0.5)),
                        ColorSequenceKeypoint.new(1, NeonUI.Theme.accent.tertiary)
                    }),
                    Rotation = 45,
                    Parent = button.ClickButton
                })
                
                -- Animar el gradiente
                spawn(function()
                    local offset = 0
                    while button.ClickButton.Parent do
                        offset = offset + 0.005
                        if offset > 1 then offset = 0 end
                        clickGradient.Offset = Vector2.new(offset, 0)
                        wait(0.016)
                    end
                end)
                
                -- Efectos de hover
                local isHovering = false
                
                button.ClickButton.MouseEnter:Connect(function()
                    isHovering = true
                    
                    Utility:Tween(button.ClickButton, {
                        Size = UDim2.new(0, 96, 0, 48),
                        Position = UDim2.new(1, -113, 0.5, -24),
                        BackgroundColor3 = NeonUI.Theme.accent.secondary
                    }, 0.3, Enum.EasingStyle.Back)
                    
                    clickGradient.Color = ColorSequence.new({
                        ColorSequenceKeypoint.new(0, NeonUI.Theme.accent.secondary),
                        ColorSequenceKeypoint.new(0.5, NeonUI.Theme.accent.primary),
                        ColorSequenceKeypoint.new(1, NeonUI.Theme.accent.secondary)
                    })
                    
                    Effects:CreateParticles(button.ClickButton, NeonUI.Theme.accent.glow, 5, {2, 4}, 0.5)
                end)
                
                button.ClickButton.MouseLeave:Connect(function()
                    isHovering = false
                    
                    Utility:Tween(button.ClickButton, {
                        Size = UDim2.new(0, 90, 0, 44),
                        Position = UDim2.new(1, -110, 0.5, -22),
                        BackgroundColor3 = NeonUI.Theme.accent.tertiary
                    }, 0.3, Enum.EasingStyle.Back)
                    
                    clickGradient.Color = ColorSequence.new({
                        ColorSequenceKeypoint.new(0, NeonUI.Theme.accent.tertiary),
                        ColorSequenceKeypoint.new(0.5, NeonUI.Theme.accent.tertiary:Lerp(NeonUI.Theme.accent.secondary, 0.5)),
                        ColorSequenceKeypoint.new(1, NeonUI.Theme.accent.tertiary)
                    })
                    
                    -- Limpiar partículas
                    for _, child in pairs(button.ClickButton:GetChildren()) do
                        if child.Name == "ParticleContainer" then
                            child:Destroy()
                        end
                    end
                end)
                
                -- Evento de clic
                button.ClickButton.MouseButton1Click:Connect(function()
                    -- Efecto de clic
                    Utility:Tween(button.ClickButton, {
                        Size = UDim2.new(0, 86, 0, 40),
                        Position = UDim2.new(1, -108, 0.5, -20)
                    }, 0.1)
                    
                    -- Ripple effect
                    Utility:Ripple(button.ClickButton, NeonUI.Theme.accent.glow)
                    
                    -- Restaurar tamaño después del clic
                    wait(0.1)
                    Utility:Tween(button.ClickButton, {
                        Size = isHovering and UDim2.new(0, 96, 0, 48) or UDim2.new(0, 90, 0, 44),
                        Position = isHovering and UDim2.new(1, -113, 0.5, -24) or UDim2.new(1, -110, 0.5, -22)
                    }, 0.2)
                    
                    -- Ejecutar callback
                    pcall(callback)
                end)
                
                table.insert(section.Elements, button)
                table.insert(tab.Elements, button)
                
                return button
            end
            
            function section:AddParagraph(title, content)
                local paragraph = {
                    Title = title or "Paragraph",
                    Content = content or ""
                }
                
                -- Calcular altura basada en el contenido
                local textHeight = 40 -- altura mínima
                if content then
                    local lines = math.ceil(string.len(content) / 30)
                    textHeight = textHeight + lines * 20
                end
                
                -- Contenedor del párrafo
                paragraph.Container = Utility:Create("Frame", {
                    Name = "Paragraph_" .. title,
                    BackgroundColor3 = NeonUI.Theme.bg.dark:Lerp(NeonUI.Theme.accent.tertiary, 0.1),
                    BackgroundTransparency = 0.1,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, -10, 0, textHeight),
                    ZIndex = 13,
                    Parent = tab.Page
                })
                
                -- Esquinas redondeadas
                Utility:Create("UICorner", {
                    CornerRadius = UDim.new(0, 8),
                    Parent = paragraph.Container
                })
                
                -- Borde sutil
                Utility:Create("UIStroke", {
                    Color = NeonUI.Theme.accent.tertiary,
                    Transparency = 0.7,
                    Thickness = 1,
                    Parent = paragraph.Container
                })
                
                -- Título
                paragraph.TitleLabel = Utility:Create("TextLabel", {
                    Name = "Title",
                    BackgroundTransparency = 1,
                    Position = UDim2.fromOffset(14, 8),
                    Size = UDim2.new(1, -28, 0, 20),
                    Font = Enum.Font.GothamBold,
                    Text = paragraph.Title,
                    TextColor3 = NeonUI.Theme.text.primary,
                    TextSize = 16,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    ZIndex = 14,
                    Parent = paragraph.Container
                })
                
                -- Gradiente para el título
                Utility:Create("UIGradient", {
                    Color = ColorSequence.new({
                        ColorSequenceKeypoint.new(0, NeonUI.Theme.text.primary),
                        ColorSequenceKeypoint.new(1, NeonUI.Theme.accent.primary)
                    }),
                    Parent = paragraph.TitleLabel
                })
                
                -- Separador
                local separator = Utility:Create("Frame", {
                    Name = "Separator",
                    BackgroundColor3 = NeonUI.Theme.accent.primary,
                    BorderSizePixel = 0,
                    Position = UDim2.fromOffset(14, 32),
                    Size = UDim2.fromOffset(50, 2),
                    ZIndex = 14,
                    Parent = paragraph.Container
                })
                
                -- Gradiente para el separador
                local sepGradient = Utility:Create("UIGradient", {
                    Color = ColorSequence.new({
                        ColorSequenceKeypoint.new(0, NeonUI.Theme.accent.primary),
                        ColorSequenceKeypoint.new(1, NeonUI.Theme.accent.primary:Lerp(NeonUI.Theme.text.primary, 0.5))
                    }),
                    Parent = separator
                })
                
                -- Animar separador
                spawn(function()
                    local offset = 0
                    while separator.Parent do
                        offset = offset + 0.01
                        if offset > 1 then offset = 0 end
                        sepGradient.Offset = Vector2.new(offset, 0)
                        wait(0.03)
                    end
                end)
                
                -- Contenido
                if content and content ~= "" then
                    paragraph.ContentLabel = Utility:Create("TextLabel", {
                        Name = "Content",
                        BackgroundTransparency = 1,
                        Position = UDim2.fromOffset(14, 38),
                        Size = UDim2.new(1, -28, 0, textHeight - 45),
                        Font = Enum.Font.Gotham,
                        Text = content,
                        TextColor3 = NeonUI.Theme.text.secondary,
                        TextSize = 14,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        TextYAlignment = Enum.TextYAlignment.Top,
                        TextWrapped = true,
                        ZIndex = 14,
                        Parent = paragraph.Container
                    })
                end
                
                -- Método para cambiar el contenido
                function paragraph:SetContent(newContent)
                    if paragraph.ContentLabel then
                        paragraph.Content = newContent
                        paragraph.ContentLabel.Text = newContent
                        
                        -- Ajustar tamaño basado en nuevo contenido
                        local lines = math.ceil(string.len(newContent) / 30)
                        local newHeight = 40 + lines * 20
                        
                        paragraph.Container.Size = UDim2.new(1, -10, 0, newHeight)
                        paragraph.ContentLabel.Size = UDim2.new(1, -28, 0, newHeight - 45)
                    end
                end
                
                table.insert(section.Elements, paragraph)
                table.insert(tab.Elements, paragraph)
                
                return paragraph
            end
            
            -- Aquí se añadirían otros tipos de elementos como toggle, slider, dropdown, etc.
            
            table.insert(tab.Sections, section)
            return section
        end
        
        table.insert(self.Tabs, tab)
        
        -- Si es el primer tab, seleccionarlo automáticamente
        if #self.Tabs == 1 then
            self:SelectTab(tab.Name)
        end
        
        return tab
    end
    
    -- Seleccionar tab
    function window:SelectTab(tabName)
        for _, tab in pairs(self.Tabs) do
            if tab.Name == tabName then
                -- Activar el tab seleccionado
                tab.Page.Visible = true
                tab.SelectionIndicator.Visible = true
                
                Utility:Tween(tab.Button, {
                    BackgroundColor3 = NeonUI.Theme.bg.dark:Lerp(NeonUI.Theme.accent.primary, 0.2),
                    BackgroundTransparency = 0,
                    TextColor3 = NeonUI.Theme.text.primary
                }, 0.3)
                
                Utility:Tween(tab.Border, {
                    Color = NeonUI.Theme.accent.primary,
                    Transparency = 0.3
                }, 0.3)
                
                if tab.Icon and tab.Icon.Parent then
                    Utility:Tween(tab.Icon.Parent, {
                        BackgroundColor3 = NeonUI.Theme.accent.primary,
                        BackgroundTransparency = 0.5
                    }, 0.3)
                    
                    Utility:Tween(tab.Icon, {
                        ImageColor3 = NeonUI.Theme.text.primary
                    }, 0.3)
                end
                
                -- Animación del indicador
                tab.SelectionIndicator.Size = UDim2.new(0, 4, 0, 0)
                tab.SelectionIndicator.Position = UDim2.new(0, -2, 0.5, 0)
                
                Utility:Tween(tab.SelectionIndicator, {
                    Size = UDim2.new(0, 4, 0, 30),
                    Position = UDim2.new(0, -2, 0.5, -15)
                }, 0.3, Enum.EasingStyle.Back)
                
                self.CurrentTab = tab
            else
                -- Desactivar otros tabs
                tab.Page.Visible = false
                tab.SelectionIndicator.Visible = false
                
                Utility:Tween(tab.Button, {
                    BackgroundColor3 = NeonUI.Theme.bg.dark:Lerp(NeonUI.Theme.accent.tertiary, 0.1),
                    BackgroundTransparency = 0.2,
                    TextColor3 = NeonUI.Theme.text.secondary
                }, 0.3)
                
                Utility:Tween(tab.Border, {
                    Color = NeonUI.Theme.accent.tertiary,
                    Transparency = 0.7
                }, 0.3)
                
                if tab.Icon and tab.Icon.Parent then
                    Utility:Tween(tab.Icon.Parent, {
                        BackgroundColor3 = NeonUI.Theme.accent.tertiary,
                        BackgroundTransparency = 0.8
                    }, 0.3)
                    
                    Utility:Tween(tab.Icon, {
                        ImageColor3 = NeonUI.Theme.text.secondary
                    }, 0.3)
                end
            end
        end
    end
    
    table.insert(self.Windows, window)
    return window
end

-- Generar notificación
function NeonUI:Notify(title, content, duration, type)
    return NotificationSystem:Notify(self.ScreenGui, title, content, duration, type)
end

-- Retornar la biblioteca inicializada
return NeonUI
