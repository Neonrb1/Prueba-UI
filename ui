--[[
    NeonUI Library - Tema Lava Premium
    Desarrollado por: MRX
    Diseño: Claude
    
    Una biblioteca de UI avanzada y moderna para scripts de Roblox
    Compatible con PC y dispositivos móviles
    
    Características:
    - Diseño moderno con animaciones fluidas y efectos de lava dinámicos
    - Sistema de partículas avanzado
    - Elementos reactivos con respuesta visual
    - Soporte para dispositivos móviles y PC
    - Sistema de guardado de configuración
    - Componentes interactivos con efectos premium
]]

-- Servicios
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local CoreGui = game:GetService("CoreGui")

-- Variables locales
local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()
local isMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled
local sin = math.sin
local cos = math.cos
local random = math.random
local time = os.time

-- Constantes UI - Tema Lava Premium
local FONT = Enum.Font.GothamBold
local FONT_SIZE = 14
local PRIMARY_COLOR = Color3.fromRGB(15, 15, 15)       -- Fondo principal (negro intenso)
local SECONDARY_COLOR = Color3.fromRGB(25, 8, 8)       -- Fondo secundario (rojo oscuro)
local ACCENT_COLOR = Color3.fromRGB(255, 65, 10)       -- Acento principal (naranja lava)
local ACCENT_COLOR2 = Color3.fromRGB(230, 30, 30)      -- Acento secundario (rojo intenso)
local TEXT_COLOR = Color3.fromRGB(255, 255, 255)       -- Texto principal (blanco)
local SUBTEXT_COLOR = Color3.fromRGB(200, 200, 200)    -- Texto secundario (gris claro)
local GLOW_COLOR = Color3.fromRGB(255, 100, 20)        -- Color de brillo (naranja brillante)
local EMBER_COLOR = Color3.fromRGB(255, 180, 30)       -- Color de chispas (ámbar)
local TRANSPARENCY = 0.05
local CORNER_RADIUS = UDim.new(0, 8)

-- Utilidades
local Utility = {}

-- Crear objetos de instancia con propiedades
function Utility:Create(instance, properties, children)
    local object = Instance.new(instance)
    
    for property, value in pairs(properties or {}) do
        object[property] = value
    end
    
    for _, child in ipairs(children or {}) do
        child.Parent = object
    end
    
    return object
end

-- Crear Tween con curvas avanzadas
function Utility:Tween(instance, properties, duration, style, direction)
    style = style or Enum.EasingStyle.Quint
    direction = direction or Enum.EasingDirection.Out
    
    local tween = TweenService:Create(
        instance, 
        TweenInfo.new(duration, style, direction), 
        properties
    )
    tween:Play()
    return tween
end

-- Ripple Effect mejorado (efecto de onda al hacer clic)
function Utility:Ripple(instance, color)
    local rippleColor = color or GLOW_COLOR
    -- Crear entre 1 y 3 ripples para un efecto más dinámico
    for i = 1, math.random(1, 2) do
        local ripple = self:Create("Frame", {
            Name = "Ripple",
            AnchorPoint = Vector2.new(0.5, 0.5),
            BackgroundColor3 = rippleColor,
            BackgroundTransparency = 0.7,
            Position = UDim2.fromOffset(Mouse.X - instance.AbsolutePosition.X, Mouse.Y - instance.AbsolutePosition.Y),
            Size = UDim2.fromScale(0, 0),
            ZIndex = instance.ZIndex + 1,
            Parent = instance
        })
        
        local corner = self:Create("UICorner", {
            CornerRadius = UDim.new(1, 0),
            Parent = ripple
        })
        
        -- Tamaño aleatorio para variedad
        local targetSize = UDim2.fromScale(random(15, 25)/10, random(15, 25)/10)
        
        -- Velocidad aleatoria para variedad
        local duration = random(4, 6)/10
        
        self:Tween(ripple, {
            Size = targetSize, 
            BackgroundTransparency = 1,
            Position = UDim2.fromOffset(
                Mouse.X - instance.AbsolutePosition.X, 
                Mouse.Y - instance.AbsolutePosition.Y
            )
        }, duration, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        
        task.delay(duration, function()
            ripple:Destroy()
        end)
    end
    
    -- Añadir breve destello al elemento clickeado
    local flash = self:Create("Frame", {
        Name = "ClickFlash",
        Size = UDim2.fromScale(1, 1),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 0.9,
        BorderSizePixel = 0,
        ZIndex = instance.ZIndex,
        Parent = instance
    })
    
    -- Copiar el corner radius del padre
    if instance:FindFirstChildOfClass("UICorner") then
        local cornerClone = instance:FindFirstChildOfClass("UICorner"):Clone()
        cornerClone.Parent = flash
    end
    
    self:Tween(flash, {BackgroundTransparency = 1}, 0.3)
    task.delay(0.3, function()
        flash:Destroy()
    end)
end

-- Crear efecto de partículas avanzado para fondos
function Utility:CreateParticles(parent, options)
    options = options or {}
    local color = options.color or GLOW_COLOR
    local count = options.count or 12
    local speed = options.speed or 1
    local size = options.size or {min = 2, max = 5}
    local fadeIn = options.fadeIn or false
    
    local container = self:Create("Frame", {
        Name = "ParticleContainer",
        BackgroundTransparency = 1,
        Size = UDim2.fromScale(1, 1),
        ClipsDescendants = true,
        ZIndex = parent.ZIndex + 1,
        Parent = parent
    })
    
    for i = 1, count do
        -- Tamaño aleatorio
        local particleSize = random(size.min, size.max)
        
        local particle = self:Create("Frame", {
            Name = "Particle_" .. i,
            BackgroundColor3 = color,
            BackgroundTransparency = fadeIn and 1 or random(3, 7)/10,
            BorderSizePixel = 0,
            Position = UDim2.fromScale(math.random(), math.random()),
            Size = UDim2.fromOffset(particleSize, particleSize),
            ZIndex = container.ZIndex,
            Parent = container
        })
        
        -- Forma aleatoria (círculo o diamante)
        if random(1, 2) == 1 then
            self:Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = particle
            })
        else
            self:Create("UICorner", {
                CornerRadius = UDim.new(0, 2),
                Parent = particle
            })
            particle.Rotation = random(0, 45)
        end
        
        -- Añadir brillo sutil
        if random(1, 3) == 1 then
            self:CreateGlow(particle, color, 1.2)
        end
        
        -- Animar partícula con movimiento único
        spawn(function()
            local baseSpeedY = random(15, 35) / 1000 * speed
            local sizeVariation = random(80, 120) / 100
            local wobbleSpeed = random(5, 20) / 10
            local wobbleIntensity = random(5, 15) / 1000
            local startPosX = particle.Position.X.Scale
            local offset = random(0, 100) / 100
            local rotatingParticle = random(1, 3) == 1
            
            -- Entrada con fade si está habilitado
            if fadeIn then
                self:Tween(particle, {BackgroundTransparency = random(3, 7)/10}, random(5, 15)/10)
            end
            
            while particle.Parent do
                -- Calcular movimiento en Y (ascendente)
                local newPosY = (particle.Position.Y.Scale - baseSpeedY) % 1.2
                if newPosY > 1 then 
                    -- Reiniciar desde abajo con nuevas propiedades aleatorias
                    newPosY = -0.2
                    particle.BackgroundTransparency = random(3, 7)/10
                    if rotatingParticle then
                        particle.Rotation = random(0, 90)
                    end
                    
                    -- Reposicionar en X aleatoriamente a veces
                    if random(1, 5) == 1 then
                        startPosX = random(0, 100) / 100
                    end
                end
                
                -- Ajustar tamaño periódicamente para efecto de parpadeo
                if random(1, 50) == 1 then
                    local newSize = particleSize * random(90, 110) / 100
                    self:Tween(particle, {
                        Size = UDim2.fromOffset(newSize, newSize)
                    }, 0.3)
                end
                
                -- Calcular movimiento en X (ondulado)
                local timeFactor = time() * wobbleSpeed + offset
                local wobble = sin(timeFactor) * wobbleIntensity
                local newPosX = (startPosX + wobble) % 1
                
                -- Actualizar posición
                particle.Position = UDim2.fromScale(newPosX, newPosY)
                
                -- Cambio sutil de transparencia
                particle.BackgroundTransparency = 0.4 + sin(time() + offset) * 0.2
                
                wait()
            end
        end)
    end
    
    return container
end

-- Crear efecto de resplandor mejorado
function Utility:CreateGlow(parent, color, size, zIndex)
    local glow = self:Create("ImageLabel", {
        Name = "Glow",
        BackgroundTransparency = 1,
        Image = "rbxassetid://5028857084", -- Imagen de resplandor circular
        ImageColor3 = color or GLOW_COLOR,
        ImageTransparency = 0.7,
        ZIndex = zIndex or parent.ZIndex - 1,
        Parent = parent
    })
    
    -- Calcular tamaño del resplandor
    local growSize = size or 1.5
    local parentSize = parent.AbsoluteSize
    glow.Size = UDim2.new(1, parentSize.X * (growSize - 1), 1, parentSize.Y * (growSize - 1))
    glow.Position = UDim2.new(0.5, -parentSize.X * (growSize - 1)/2, 0.5, -parentSize.Y * (growSize - 1)/2)
    glow.AnchorPoint = Vector2.new(0.5, 0.5)
    
    -- Animar el resplandor con pulso suave
    spawn(function()
        local minTrans = 0.7
        local maxTrans = 0.9
        local phase = random(0, 100) / 100 -- Fase aleatoria para que no todos pulsen al mismo tiempo
        
        while glow.Parent do
            local transparency = minTrans + (sin(time() * 2 + phase) + 1) / 2 * (maxTrans - minTrans)
            glow.ImageTransparency = transparency
            
            -- Animar sutilmente el tamaño también
            local sizeFactor = 1 + sin(time() * 1.5 + phase * 2) * 0.05
            glow.Size = UDim2.new(
                1, parentSize.X * (growSize * sizeFactor - 1), 
                1, parentSize.Y * (growSize * sizeFactor - 1)
            )
            
            wait(0.03)
        end
    end)
    
    return glow
end

-- Crear efecto de lava burbujeante para fondos
function Utility:CreateLavaBackground(parent)
    -- Marco de fondo con degradado dinámico
    local bgFrame = self:Create("Frame", {
        Name = "LavaBackground",
        BackgroundColor3 = PRIMARY_COLOR,
        BorderSizePixel = 0,
        Size = UDim2.fromScale(1, 1),
        ClipsDescendants = true,
        Parent = parent
    })
    
    -- Copiar bordes redondeados si existen
    if parent:FindFirstChild("UICorner") then
        parent:FindFirstChild("UICorner"):Clone().Parent = bgFrame
    end
    
    -- Gradient de fondo animado
    local gradient = self:Create("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, PRIMARY_COLOR),
            ColorSequenceKeypoint.new(0.3, SECONDARY_COLOR:Lerp(PRIMARY_COLOR, 0.3)),
            ColorSequenceKeypoint.new(0.7, SECONDARY_COLOR:Lerp(ACCENT_COLOR2, 0.1)),
            ColorSequenceKeypoint.new(1, SECONDARY_COLOR)
        }),
        Rotation = 90,
        Parent = bgFrame
    })
    
    -- Animación del gradiente
    spawn(function()
        local offset = 0
        while gradient.Parent do
            -- Movimiento suave con variación de color
            offset = (offset + 0.002) % 1
            
            -- Intensidad variable para más dinamismo
            local intensity = (sin(time() * 0.5) + 1) / 4
            
            gradient.Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, PRIMARY_COLOR),
                ColorSequenceKeypoint.new(0.3, SECONDARY_COLOR:Lerp(PRIMARY_COLOR, 0.3 + intensity * 0.1)),
                ColorSequenceKeypoint.new(0.7, SECONDARY_COLOR:Lerp(ACCENT_COLOR2, 0.1 + intensity * 0.2)),
                ColorSequenceKeypoint.new(1, SECONDARY_COLOR)
            })
            
            gradient.Offset = Vector2.new(0, offset)
            wait(0.016)
        end
    end)
    
    -- Partículas de lava ascendentes (más pequeñas y numerosas)
    self:CreateParticles(bgFrame, {
        color = GLOW_COLOR,
        count = 15,
        size = {min = 2, max = 5},
        speed = 0.8,
        fadeIn = true
    })
    
    -- Partículas de chispas (más brillantes y ocasionales)
    self:CreateParticles(bgFrame, {
        color = EMBER_COLOR,
        count = 5,
        size = {min = 1, max = 3},
        speed = 1.2
    })
    
    -- Crear "bolsas" de lava (burbujas flotantes más grandes y lentas)
    local blobCount = random(3, 6)
    for i = 1, blobCount do
        local blobSize = random(40, 90)
        local blob = self:Create("Frame", {
            Name = "LavaBlob_" .. i,
            BackgroundColor3 = ACCENT_COLOR:Lerp(ACCENT_COLOR2, random(0, 100)/100),
            BackgroundTransparency = random(60, 80)/100,
            Size = UDim2.fromOffset(blobSize, blobSize),
            Position = UDim2.fromScale(random(10, 90)/100, random(70, 120)/100),
            BorderSizePixel = 0,
            ZIndex = bgFrame.ZIndex + 1,
            Parent = bgFrame
        })
        
        -- Hacer orgánico con bordes redondeados
        self:Create("UICorner", {
            CornerRadius = UDim.new(random(40, 100)/100, 0),
            Parent = blob
        })
        
        -- Gradiente interno para efecto 3D
        self:Create("UIGradient", {
            Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, ACCENT_COLOR:Lerp(Color3.new(1,1,1), 0.2)),
                ColorSequenceKeypoint.new(0.5, blob.BackgroundColor3),
                ColorSequenceKeypoint.new(1, ACCENT_COLOR2:Lerp(Color3.new(0,0,0), 0.3))
            }),
            Rotation = random(0, 360),
            Parent = blob
        })
        
        -- Animación flotante de la burbuja
        spawn(function()
            local speed = random(5, 15) / 1000
            local wobbleSpeed = random(5, 15) / 10
            local wobbleIntensity = random(5, 15) / 100
            local startPosX = blob.Position.X.Scale
            local startPosY = blob.Position.Y.Scale
            local offset = random(0, 100) / 100
            
            while blob.Parent do
                -- Movimiento ascendente lento
                startPosY = startPosY - speed
                if startPosY < -0.2 then startPosY = random(0.7, 1.2) end
                
                -- Movimiento ondulante
                local xOffset = sin(time() * wobbleSpeed + offset) * wobbleIntensity
                
                -- Actualizar posición
                blob.Position = UDim2.fromScale(startPosX + xOffset, startPosY)
                
                -- Pulsación sutil de tamaño
                local sizePulse = 1 + sin(time() * 1.5 + offset * 2) * 0.05
                blob.Size = UDim2.fromOffset(blobSize * sizePulse, blobSize * sizePulse)
                
                -- Transparencia variable
                blob.BackgroundTransparency = 0.7 + sin(time() + offset) * 0.1
                
                wait(0.016)
            end
        end)
    end
    
    -- Borde interior brillante con pulso
    local innerBorder = self:Create("UIStroke", {
        Name = "InnerGlow",
        Color = ACCENT_COLOR,
        Thickness = 1,
        Transparency = 0.7,
        ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
        Parent = bgFrame
    })
    
    -- Animar el borde interno
    spawn(function()
        local offset = random(0, 100) / 100
        while innerBorder.Parent do
            local transparency = 0.7 + sin(time() + offset) * 0.2
            innerBorder.Transparency = transparency
            
            -- Cambiar sutil de color
            local colorBlend = 0.2 + sin(time() * 0.5 + offset) * 0.1
            innerBorder.Color = ACCENT_COLOR:Lerp(ACCENT_COLOR2, colorBlend)
            
            wait(0.03)
        end
    end)
    
    return bgFrame
end

-- Sistema de sombras premium
function Utility:CreateShadow(parent, settings)
    settings = settings or {}
    local shadowSize = settings.size or 10
    local intensity = settings.intensity or 0.8
    local zIndex = settings.zIndex or (parent.ZIndex - 1)
    
    -- Contenedor de sombras
    local shadowContainer = self:Create("Frame", {
        Name = "PremiumShadow",
        BackgroundTransparency = 1,
        Size = UDim2.new(1, shadowSize * 2, 1, shadowSize * 2),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        AnchorPoint = Vector2.new(0.5, 0.5),
        ZIndex = zIndex,
        Parent = parent
    })
    
    -- Crear capas de sombras para efecto de profundidad
    local layers = 4
    local shadows = {}
    local baseColor = Color3.fromRGB(0, 0, 0)
    
    for i = 1, layers do
        local shadowAlpha = 0.8 - ((i/layers) * 0.6)
        local shadow = self:Create("Frame", {
            Name = "ShadowLayer_" .. i,
            BackgroundColor3 = baseColor,
            BackgroundTransparency = 1 - (shadowAlpha * intensity),
            BorderSizePixel = 0,
            Size = UDim2.fromScale(1, 1),
            Position = UDim2.fromScale(0.5, 0.5),
            AnchorPoint = Vector2.new(0.5, 0.5),
            ZIndex = shadowContainer.ZIndex - i,
            Parent = shadowContainer
        })
        
        -- Copiar las propiedades de esquina del padre
        if parent:FindFirstChild("UICorner") then
            local cornerClone = parent:FindFirstChild("UICorner"):Clone()
            cornerClone.CornerRadius = UDim.new(
                cornerClone.CornerRadius.Scale,
                cornerClone.CornerRadius.Offset + shadowSize / 2 * i / layers
            )
            cornerClone.Parent = shadow
        end
        
        shadows[i] = shadow
    end
    
    -- Animar sombras sutilmente
    spawn(function()
        local offset = random(0, 100) / 100
        while shadowContainer.Parent do
            local pulseIntensity = (sin(time() * 0.7 + offset) + 1) / 2 * 0.08
            
            for i, shadow in ipairs(shadows) do
                local baseSize = 1 + ((i-1) / layers * 0.1)
                local pulseFactor = baseSize + pulseIntensity * i / layers
                
                shadow.Size = UDim2.fromScale(pulseFactor, pulseFactor)
            end
            
            wait(0.03)
        end
    end)
    
    return shadowContainer
end

-- Arrastrar elementos con física y rebote
function Utility:DraggableWithPhysics(frame, dragui)
    local dragging, dragInput, dragStart, startPos
    local velocity = Vector2.new(0, 0)
    local lastPos, lastTime
    local dampingFactor = 0.9
    local springFactor = 0.1
    local elasticRange = 50
    
    -- Inertia simulation
    local function simulateInertia()
        local initialVelocity = velocity
        local magnitude = initialVelocity.Magnitude
        
        if magnitude < 1 then return end
        
        local decay = 0.95
        local bounceThreshold = 15
        local bounceFactor = 0.5
        
        -- Initialize animation variables
        local currentVelocity = initialVelocity
        local currentPos = frame.Position
        
        -- Calculate screen bounds
        local screenSize = workspace.CurrentCamera.ViewportSize
        local frameSize = frame.AbsoluteSize
        local minX = elasticRange
        local maxX = screenSize.X - frameSize.X - elasticRange
        local minY = elasticRange
        local maxY = screenSize.Y - frameSize.Y - elasticRange
        
        -- Animation loop
        spawn(function()
            while currentVelocity.Magnitude > 0.5 do
                -- Calculate new position
                local newOffset = currentPos + UDim2.fromOffset(currentVelocity.X, currentVelocity.Y)
                
                -- Check if we need to bounce
                local newX = newOffset.X.Offset
                local newY = newOffset.Y.Offset
                local bounced = false
                
                -- Bounce off edges
                if newX < minX and currentVelocity.X < 0 then
                    currentVelocity = Vector2.new(-currentVelocity.X * bounceFactor, currentVelocity.Y)
                    bounced = true
                elseif newX > maxX and currentVelocity.X > 0 then
                    currentVelocity = Vector2.new(-currentVelocity.X * bounceFactor, currentVelocity.Y)
                    bounced = true
                end
                
                if newY < minY and currentVelocity.Y < 0 then
                    currentVelocity = Vector2.new(currentVelocity.X, -currentVelocity.Y * bounceFactor)
                    bounced = true
                elseif newY > maxY and currentVelocity.Y > 0 then
                    currentVelocity = Vector2.new(currentVelocity.X, -currentVelocity.Y * bounceFactor)
                    bounced = true
                end
                
                -- Apply position and reduce velocity
                frame.Position = bounced 
                    and UDim2.new(currentPos.X.Scale, math.clamp(newX, minX, maxX), currentPos.Y.Scale, math.clamp(newY, minY, maxY))
                    or newOffset
                
                currentPos = frame.Position
                currentVelocity = currentVelocity * decay
                
                -- Add subtle elastic effect when near edges
                if newX < minX + 30 or newX > maxX - 30 or newY < minY + 30 or newY > maxY - 30 then
                    decay = 0.85  -- Faster decay near edges
                else
                    decay = 0.95
                end
                
                wait(0.016)
            end
        end)
    end
    
    local function updateDrag(input)
        local delta = input.Position - dragStart
        local newPosition = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
        
        -- Calculate velocity for inertia
        if lastPos and lastTime then
            local deltaTime = tick() - lastTime
            if deltaTime > 0 then
                local deltaPos = Vector2.new(
                    newPosition.X.Offset - lastPos.X.Offset,
                    newPosition.Y.Offset - lastPos.Y.Offset
                )
                velocity = deltaPos / deltaTime
            end
        end
        
        lastPos = newPosition
        lastTime = tick()
        
        -- Apply elastic bounds
        local screenSize = workspace.CurrentCamera.ViewportSize
        local frameSize = frame.AbsoluteSize
        local minX = -elasticRange
        local maxX = screenSize.X - frameSize.X + elasticRange
        local minY = -elasticRange
        local maxY = screenSize.Y - frameSize.Y + elasticRange
        
        local targetX = newPosition.X.Offset
        local targetY = newPosition.Y.Offset
        local clampedX = math.clamp(targetX, minX, maxX)
        local clampedY = math.clamp(targetY, minY, maxY)
        
        -- Apply elastic effect when dragging beyond bounds
        if targetX < minX or targetX > maxX then
            clampedX = minX + (targetX - minX) * springFactor
            if clampedX > maxX then
                clampedX = maxX + (targetX - maxX) * springFactor
            end
            velocity = velocity * dampingFactor
        end
        
        if targetY < minY or targetY > maxY then
            clampedY = minY + (targetY - minY) * springFactor
            if clampedY > maxY then
                clampedY = maxY + (targetY - maxY) * springFactor
            end
            velocity = velocity * dampingFactor
        end
        
        frame.Position = UDim2.new(startPos.X.Scale, clampedX, startPos.Y.Scale, clampedY)
    end
    
    dragui.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            lastPos = startPos
            lastTime = tick()
            velocity = Vector2.new(0, 0)
            
            -- Añadir efecto visual de agarre
            if dragui:FindFirstChild("DragEffect") then
                dragui:FindFirstChild("DragEffect"):Destroy()
            end
            
            local dragEffect = self:Create("Frame", {
                Name = "DragEffect",
                BackgroundTransparency = 1,
                Size = UDim2.fromScale(1, 1),
                ZIndex = dragui.ZIndex + 1,
                Parent = dragui
            })
            
            -- Resaltar el borde durante el arrastre
            local border = dragui:FindFirstChildOfClass("UIStroke")
            if border then
                self:Tween(border, {
                    Color = ACCENT_COLOR,
                    Thickness = border.Thickness + 1
                }, 0.2)
            end
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                    
                    -- Restaurar el borde
                    if border then
                        self:Tween(border, {
                            Color = border.Color:Lerp(ACCENT_COLOR2, 0.5),
                            Thickness = border.Thickness - 1
                        }, 0.2)
                    end
                    
                    -- Apply inertia
                    simulateInertia()
                    
                    -- Eliminar efecto
                    if dragEffect and dragEffect.Parent then
                        dragEffect:Destroy()
                    end
                end
            end)
        end
    end)
    
    dragui.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            updateDrag(input)
        end
    end)
end

-- Sistema de guardado
local SaveSystem = {}

-- Generar ID único para cada script
function SaveSystem:GenerateUID()
    local template = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx"
    return string.gsub(template, "[xy]", function (c)
        local v = (c == "x") and math.random(0, 0xf) or math.random(8, 0xb)
        return string.format("%x", v)
    end)
end

-- Guardar configuración
function SaveSystem:SaveSettings(name, settings)
    if not name then return end
    
    local success, result = pcall(function()
        return HttpService:JSONEncode(settings)
    end)
    
    if success then
        if writefile then
            local folderPath = "NeonUI/"
            local fileName = folderPath .. name .. ".json"
            
            if not isfolder(folderPath) then
                makefolder(folderPath)
            end
            
            writefile(fileName, result)
            return true
        end
    end
    
    return false
end

-- Cargar configuración
function SaveSystem:LoadSettings(name)
    if not name then return end
    
    local folderPath = "NeonUI/"
    local fileName = folderPath .. name .. ".json"
    
    if readfile and isfile and isfile(fileName) then
        local success, result = pcall(function()
            return HttpService:JSONDecode(readfile(fileName))
        end)
        
        if success then
            return result
        end
    end
    
    return nil
end

-- NeonUI principal
local NeonUI = {
    Windows = {},
    Theme = {
        Primary = PRIMARY_COLOR,
        Secondary = SECONDARY_COLOR,
        Accent = ACCENT_COLOR,
        Accent2 = ACCENT_COLOR2,
        Text = TEXT_COLOR,
        SubText = SUBTEXT_COLOR,
        Glow = GLOW_COLOR,
        Ember = EMBER_COLOR,
        Transparency = TRANSPARENCY,
        CornerRadius = CORNER_RADIUS,
        Font = FONT,
        FontSize = FONT_SIZE
    },
    Flags = {},
    Version = "3.0.0"
}

-- Inicialización de la UI
function NeonUI:Init()
    -- Destruir GUI existente si existe
    if getgenv().NeonUIObject then
        getgenv().NeonUIObject:Destroy()
    end
    
    -- Crear contenedor principal
    self.Container = Utility:Create("ScreenGui", {
        Name = "NeonUI",
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        ResetOnSpawn = false
    })
    
    -- Establecer el parent con la protección adecuada
    if gethui then
        self.Container.Parent = gethui()
    elseif syn and syn.protect_gui then
        syn.protect_gui(self.Container)
        self.Container.Parent = CoreGui
    else
        self.Container.Parent = CoreGui
    end
    
    getgenv().NeonUIObject = self.Container
    
    -- Notificación de inicio
    self:Notify({
        Title = "NeonUI Premium",
        Content = "Biblioteca inicializada correctamente v" .. self.Version,
        Duration = 3,
        Type = "info"
    })
    
    return self
end

-- Sistema de notificaciones premium con tema lava
function NeonUI:Notify(options)
    options = options or {}
    local notification = {
        Title = options.Title or "Notificación",
        Content = options.Content or "",
        Duration = options.Duration or 5,
        Type = options.Type or "info" -- info, success, warning, error
    }
    
    -- Determinar color según tipo
    local colorMap = {
        info = self.Theme.Accent,
        success = Color3.fromRGB(80, 255, 120),
        warning = Color3.fromRGB(255, 235, 50),
        error = Color3.fromRGB(255, 60, 60)
    }
    local color = colorMap[notification.Type]
    
    -- Marco principal con esquinas perfectas
    local notifFrame = Utility:Create("Frame", {
        Name = "Notification",
        BackgroundColor3 = self.Theme.Primary,
        BorderSizePixel = 0,
        Position = UDim2.new(1, 20, 0.95, 0),
        AnchorPoint = Vector2.new(1, 1),
        Size = UDim2.new(0, 300, 0, 90),
        Parent = self.Container,
        ZIndex = 100
    })
    
    -- Efecto de sombra premium
    Utility:CreateShadow(notifFrame, {
        size = 15,
        intensity = 0.8
    })
    
    -- Esquinas redondeadas perfectas
    Utility:Create("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = notifFrame
    })
    
    -- Fondo con efecto lava
    Utility:CreateLavaBackground(notifFrame)
    
    -- Barra de acento según tipo
    local accentBar = Utility:Create("Frame", {
        Name = "AccentBar",
        BackgroundColor3 = color,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(0, 5, 1, 0),
        ZIndex = 102,
        Parent = notifFrame
    })
    
    -- Esquinas redondeadas para barra
    Utility:Create("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = accentBar
    })
    
    -- Arreglar bordes de barra (solo izquierda)
    local barFix = Utility:Create("Frame", {
        Name = "BarFix",
        BackgroundColor3 = color,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, 0, 0, 0),
        Size = UDim2.new(0.5, 0, 1, 0),
        ZIndex = 102,
        Parent = accentBar
    })
    
    -- Título con gradiente
    local titleLabel = Utility:Create("TextLabel", {
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.fromOffset(15, 8),
        Size = UDim2.new(1, -60, 0, 25),
        Font = self.Theme.Font,
        Text = notification.Title,
        TextColor3 = self.Theme.Text,
        TextSize = self.Theme.FontSize + 2,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 102,
        Parent = notifFrame
    })
    
    -- Gradiente para el título
    Utility:Create("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, self.Theme.Text),
            ColorSequenceKeypoint.new(1, color)
        }),
        Parent = titleLabel
    })
    
    -- Añadir icono según el tipo
    local iconMap = {
        info = "7734010138",
        success = "7733956746",
        warning = "7734036668",
        error = "7743824019"
    }
    
    local icon = Utility:Create("ImageLabel", {
        Name = "TypeIcon",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -35, 0, 12),
        Size = UDim2.fromOffset(20, 20),
        Image = "rbxassetid://" .. (iconMap[notification.Type] or iconMap.info),
        ImageColor3 = color,
        ZIndex = 102,
        Parent = notifFrame
    })
    
    -- Añadir brillo al icono
    Utility:CreateGlow(icon, color, 1.5, 101)
    
    -- Contenido
    local contentLabel = Utility:Create("TextLabel", {
        Name = "Content",
        BackgroundTransparency = 1,
        Position = UDim2.fromOffset(15, 38),
        Size = UDim2.new(1, -30, 0, 40),
        Font = Enum.Font.Gotham,
        Text = notification.Content,
        TextColor3 = self.Theme.SubText,
        TextSize = self.Theme.FontSize - 1,
        TextWrapped = true,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Top,
        ZIndex = 102,
        Parent = notifFrame
    })
    
    -- Barra de progreso
    local progressBar = Utility:Create("Frame", {
        Name = "ProgressBar",
        BackgroundColor3 = color,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 1, -2),
        Size = UDim2.new(1, 0, 0, 2),
        ZIndex = 102,
        Parent = notifFrame
    })
    
    -- Animación de entrada con física
    notifFrame.Position = UDim2.new(1, 350, 0.95, 0)
    local tweenInfo = TweenInfo.new(0.6, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
    local tweenIn = TweenService:Create(notifFrame, tweenInfo, {
        Position = UDim2.new(1, -20, 0.95, 0)
    })
    tweenIn:Play()
    
    -- Partículas durante la entrada
    spawn(function()
        wait(0.2)
        for i = 1, 5 do
            local particle = Utility:Create("Frame", {
                Name = "EntryParticle_" .. i,
                BackgroundColor3 = color,
                BackgroundTransparency = 0.7,
                BorderSizePixel = 0,
                Position = UDim2.new(0, random(-10, 10), 0, random(-10, 10)),
                Size = UDim2.fromOffset(random(3, 6), random(3, 6)),
                ZIndex = 103,
                Parent = notifFrame
            })
            
            -- Bordes redondos
            Utility:Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = particle
            })
            
            -- Animación de partícula
            Utility:Tween(particle, {
                Position = UDim2.new(random(-20, 120)/100, random(-20, 20), random(-20, 120)/100, random(-20, 20)),
                BackgroundTransparency = 1,
                Size = UDim2.fromOffset(random(6, 10), random(6, 10))
            }, random(5, 15)/10, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            
            delay(random(5, 15)/10, function()
                particle:Destroy()
            end)
        end
    end)
    
    -- Animación de la barra de progreso
    local progressTween = TweenService:Create(progressBar, TweenInfo.new(notification.Duration, Enum.EasingStyle.Linear), {
        Size = UDim2.new(0, 0, 0, 2)
    })
    progressTween:Play()
    
    -- Botón invisible para cerrar al hacer clic
    local closeArea = Utility:Create("TextButton", {
        Name = "CloseArea",
        BackgroundTransparency = 1,
        Size = UDim2.fromScale(1, 1),
        Text = "",
        ZIndex = 101,
        Parent = notifFrame
    })
    
    closeArea.MouseEnter:Connect(function()
        -- Resaltar sutilmente al pasar el cursor
        Utility:Tween(notifFrame, {
            BackgroundColor3 = self.Theme.Primary:Lerp(self.Theme.Secondary, 0.2)
        }, 0.2)
    end)
    
    closeArea.MouseLeave:Connect(function()
        -- Restaurar color normal
        Utility:Tween(notifFrame, {
            BackgroundColor3 = self.Theme.Primary
        }, 0.2)
    end)
    
    closeArea.MouseButton1Click:Connect(function()
        -- Animar salida con rebote
        local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.In)
        local tweenOut = TweenService:Create(notifFrame, tweenInfo, {
            Position = UDim2.new(1, 350, 0.95, 0)
        })
        tweenOut:Play()
        
        -- Liberar partículas al cerrar
        for i = 1, 8 do
            local particle = Utility:Create("Frame", {
                Name = "ExitParticle_" .. i,
                BackgroundColor3 = color,
                BackgroundTransparency = 0.7,
                BorderSizePixel = 0,
                Position = UDim2.new(0.5, 0, 0.5, 0),
                Size = UDim2.fromOffset(random(3, 6), random(3, 6)),
                ZIndex = 103,
                Parent = notifFrame
            })
            
            -- Bordes redondos
            Utility:Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = particle
            })
            
            -- Dirección aleatoria
            local angle = random(0, 360)
            local distance = random(30, 80)
            
            -- Animación de partícula
            Utility:Tween(particle, {
                Position = UDim2.new(0.5, cos(math.rad(angle)) * distance, 0.5, sin(math.rad(angle)) * distance),
                BackgroundTransparency = 1,
                Size = UDim2.fromOffset(random(6, 10), random(6, 10))
            }, random(5, 15)/10, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            
            delay(random(5, 15)/10, function()
                particle:Destroy()
            end)
        end
        
        tweenOut.Completed:Connect(function()
            notifFrame:Destroy()
        end)
    end)
    
    -- Auto cerrar después de la duración
    task.delay(notification.Duration, function()
        if notifFrame and notifFrame.Parent then
            local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.In)
            local tweenOut = TweenService:Create(notifFrame, tweenInfo, {
                Position = UDim2.new(1, 350, 0.95, 0)
            })
            tweenOut:Play()
            
            tweenOut.Completed:Connect(function()
                notifFrame:Destroy()
            end)
        end
    end)
    
    return notifFrame
end

-- Diálogo modal con tema lava premium
function NeonUI:Dialog(options)
    options = options or {}
    local dialog = {
        Title = options.Title or "Diálogo",
        Content = options.Content or "",
        Buttons = options.Buttons or {{Title = "OK", Callback = function() end}}
    }
    
    -- Overlay de fondo con blur
    local overlay = Utility:Create("Frame", {
        Name = "DialogOverlay",
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        BackgroundTransparency = 1, -- Iniciar transparente para animar
        BorderSizePixel = 0,
        Position = UDim2.fromScale(0, 0),
        Size = UDim2.fromScale(1, 1),
        ZIndex = 200,
        Parent = self.Container
    })
    
    -- Añadir efecto de viñeta
    local vignette = Utility:Create("ImageLabel", {
        Name = "Vignette",
        BackgroundTransparency = 1,
        Position = UDim2.fromScale(0.5, 0.5),
        AnchorPoint = Vector2.new(0.5, 0.5),
        Size = UDim2.fromScale(1.2, 1.2),
        Image = "rbxassetid://6924028188", -- Viñeta
        ImageColor3 = Color3.fromRGB(0, 0, 0),
        ImageTransparency = 1, -- Iniciar transparente
        ZIndex = 201,
        Parent = overlay
    })
    
    -- Marco del diálogo con efecto premium
    local dialogFrame = Utility:Create("Frame", {
        Name = "DialogFrame",
        BackgroundColor3 = self.Theme.Primary,
        BorderSizePixel = 0,
        Position = UDim2.fromScale(0.5, 0.5),
        AnchorPoint = Vector2.new(0.5, 0.5),
        Size = UDim2.fromOffset(0, 0), -- Iniciar en 0 para animar
        ZIndex = 202,
        Parent = overlay
    })
    
    -- Bordes redondeados premium
    Utility:Create("UICorner", {
        CornerRadius = UDim.new(0, 12),
        Parent = dialogFrame
    })
    
    -- Fondo con efecto lava
    Utility:CreateLavaBackground(dialogFrame)
    
    -- Efecto de sombra premium
    Utility:CreateShadow(dialogFrame, {
        size = 20,
        intensity = 1
    })
    
    -- Título con gradiente dinámico
    local titleLabel = Utility:Create("TextLabel", {
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.fromOffset(20, 15),
        Size = UDim2.new(1, -40, 0, 30),
        Font = self.Theme.Font,
        Text = dialog.Title,
        TextColor3 = self.Theme.Text,
        TextSize = self.Theme.FontSize + 4,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 203,
        Parent = dialogFrame
    })
    
    -- Gradiente para el título
    local titleGradient = Utility:Create("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, self.Theme.Text),
            ColorSequenceKeypoint.new(1, self.Theme.Accent)
        }),
        Parent = titleLabel
    })
    
    -- Animar gradiente
    spawn(function()
        local offset = 0
        while titleGradient.Parent do
            offset = (offset + 0.01) % 2
            titleGradient.Offset = Vector2.new(offset - 0.5, 0)
            wait(0.03)
        end
    end)
    
    -- Separador personalizado que se adapta al texto
    local separator = Utility:Create("Frame", {
        Name = "Separator",
        BackgroundColor3 = self.Theme.Accent,
        BorderSizePixel = 0,
        Position = UDim2.fromOffset(20, 50),
        Size = UDim2.new(0, 0, 0, 2), -- Iniciar en 0 para animar
        ZIndex = 203,
        Parent = dialogFrame
    })
    
    -- Animación del separador para adaptarse al texto
    spawn(function()
        wait(0.3) -- Esperar a que aparezca el diálogo
        -- Obtener ancho del texto del título
        local textSize = game:GetService("TextService"):GetTextSize(
            titleLabel.Text,
            titleLabel.TextSize,
            titleLabel.Font,
            Vector2.new(1000, 100)
        )
        
        -- Animar el separador para que coincida con el ancho del texto + un poco más
        local targetWidth = math.min(textSize.X + 20, titleLabel.AbsoluteSize.X * 0.8)
        Utility:Tween(separator, {
            Size = UDim2.new(0, targetWidth, 0, 2)
        }, 0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        
        -- Añadir gradiente al separador
        local sepGradient = Utility:Create("UIGradient", {
            Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, self.Theme.Accent),
                ColorSequenceKeypoint.new(1, self.Theme.Accent:Lerp(self.Theme.Text, 0.5))
            }),
            Parent = separator
        })
        
        -- Animar el gradiente
        local offset = 0
        while separator.Parent do
            offset = (offset + 0.01) % 2
            sepGradient.Offset = Vector2.new(offset - 0.5, 0)
            wait(0.016)
        end
    end)
    
    -- Contenido
    local contentLabel = Utility:Create("TextLabel", {
        Name = "Content",
        BackgroundTransparency = 1,
        Position = UDim2.fromOffset(20, 60),
        Size = UDim2.new(1, -40, 0, 0), -- Altura se ajustará automáticamente
        Font = Enum.Font.Gotham,
        Text = dialog.Content,
        TextColor3 = self.Theme.SubText,
        TextSize = self.Theme.FontSize,
        TextWrapped = true,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Top,
        ZIndex = 203,
        Parent = dialogFrame
    })
    
    -- Ajustar tamaño del contenido según el texto
    local textSize = game:GetService("TextService"):GetTextSize(
        dialog.Content,
        self.Theme.FontSize,
        Enum.Font.Gotham,
        Vector2.new(300 - 40, 1000)
    )
    
    local contentHeight = math.clamp(textSize.Y + 10, 40, 200)
    contentLabel.Size = UDim2.new(1, -40, 0, contentHeight)
    
    -- Tamaño total del diálogo
    local dialogHeight = 120 + contentHeight
    
    -- Contenedor de botones
    local buttonContainer = Utility:Create("Frame", {
        Name = "ButtonContainer",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 1, -60),
        Size = UDim2.new(1, 0, 0, 50),
        ZIndex = 203,
        Parent = dialogFrame
    })
    
    -- Layout para botones
    Utility:Create("UIListLayout", {
        Padding = UDim.new(0, 15),
        FillDirection = Enum.FillDirection.Horizontal,
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Parent = buttonContainer
    })
    
    -- Crear botones avanzados
    for i, buttonInfo in ipairs(dialog.Buttons) do
        local button = Utility:Create("TextButton", {
            Name = "Button_" .. i,
            BackgroundColor3 = self.Theme.Accent,
            BorderSizePixel = 0,
            Size = UDim2.new(0, 110, 0, 36),
            Font = self.Theme.Font,
            Text = buttonInfo.Title,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = self.Theme.FontSize,
            ZIndex = 204,
            Parent = buttonContainer
        })
        
        -- Bordes redondeados para botón
        Utility:Create("UICorner", {
            CornerRadius = UDim.new(0, 6),
            Parent = button
        })
        
        -- Gradiente para el botón
        local buttonGradient = Utility:Create("UIGradient", {
            Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, self.Theme.Accent),
                ColorSequenceKeypoint.new(0.5, self.Theme.Accent:Lerp(Color3.new(1,1,1), 0.2)),
                ColorSequenceKeypoint.new(1, self.Theme.Accent)
            }),
            Rotation = 45,
            Offset = Vector2.new(0, 0),
            Parent = button
        })
        
        -- Animar el gradiente
        spawn(function()
            local offset = 0
            while button.Parent do
                offset = (offset + 0.01) % 2
                buttonGradient.Offset = Vector2.new(offset - 0.5, 0)
                wait(0.03)
            end
        end)
        
        -- Efecto de brillo
        Utility:CreateGlow(button, self.Theme.Glow, 1.3, 203)
        
        -- Efectos de hover
        button.MouseEnter:Connect(function()
            Utility:Tween(button, {
                Size = UDim2.new(0, 116, 0, 40),
                BackgroundColor3 = self.Theme.Accent:Lerp(Color3.new(1, 1, 1), 0.2)
            }, 0.2)
            
            -- Crear partículas de hover
            Utility:CreateParticles(button, {
                color = self.Theme.Ember,
                count = 3,
                size = {min = 2, max = 4},
                speed = 0.5
            })
        end)
        
        button.MouseLeave:Connect(function()
            Utility:Tween(button, {
                Size = UDim2.new(0, 110, 0, 36),
                BackgroundColor3 = self.Theme.Accent
            }, 0.2)
            
            -- Limpiar partículas
            for _, child in pairs(button:GetChildren()) do
                if child.Name == "ParticleContainer" then
                    child:Destroy()
                end
            end
        end)
        
        -- Evento de clic con efectos
        button.MouseButton1Click:Connect(function()
            -- Efecto de ripple
            Utility:Ripple(button, Color3.fromRGB(255, 255, 255))
            
            -- Animación de pulsación
            Utility:Tween(button, {
                Size = UDim2.new(0, 105, 0, 32)
            }, 0.1)
            
            -- Emisión de partículas
            for i = 1, 8 do
                local particle = Utility:Create("Frame", {
                    Name = "ClickParticle_" .. i,
                    BackgroundColor3 = self.Theme.Ember,
                    BackgroundTransparency = 0.4,
                    BorderSizePixel = 0,
                    Position = UDim2.fromScale(0.5, 0.5),
                    Size = UDim2.fromOffset(random(2, 4), random(2, 4)),
                    ZIndex = 205,
                    Parent = button
                })
                
                -- Bordes redondos
                Utility:Create("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = particle
                })
                
                -- Dirección aleatoria
                local angle = random(0, 360)
                local distance = random(20, 40)
                
                -- Animación de partícula
                Utility:Tween(particle, {
                    Position = UDim2.new(0.5, cos(math.rad(angle)) * distance, 0.5, sin(math.rad(angle)) * distance),
                    BackgroundTransparency = 1,
                    Size = UDim2.fromOffset(random(4, 8), random(4, 8))
                }, random(5, 15)/10, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                
                delay(random(5, 15)/10, function()
                    particle:Destroy()
                end)
            end
            
            task.wait(0.1)
            
            -- Ejecutar callback
            if buttonInfo.Callback then
                buttonInfo.Callback()
            end
            
            -- Animación de cierre
            local tweenOut1 = TweenService:Create(overlay, TweenInfo.new(0.3), {
                BackgroundTransparency = 1
            })
            
            local tweenOut2 = TweenService:Create(vignette, TweenInfo.new(0.3), {
                ImageTransparency = 1
            })
            
            local tweenOut3 = TweenService:Create(dialogFrame, TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In), {
                Size = UDim2.fromOffset(0, 0),
                Position = UDim2.fromScale(0.5, 0.5)
            })
            
            tweenOut1:Play()
            tweenOut2:Play()
            tweenOut3:Play()
            
            tweenOut3.Completed:Connect(function()
                overlay:Destroy()
            end)
        end)
    end
    
    -- Animación de apertura
    TweenService:Create(overlay, TweenInfo.new(0.3), {
        BackgroundTransparency = 0.5
    }):Play()
    
    TweenService:Create(vignette, TweenInfo.new(0.5), {
        ImageTransparency = 0.4
    }):Play()
    
    TweenService:Create(dialogFrame, TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
        Size = UDim2.fromOffset(340, dialogHeight)
    }):Play()
    
    -- Animación de entrada para botones
    for i, button in ipairs(buttonContainer:GetChildren()) do
        if button:IsA("TextButton") then
            button.BackgroundTransparency = 1
            button.TextTransparency = 1
            
            delay(0.3 + (i * 0.1), function()
                Utility:Tween(button, {
                    BackgroundTransparency = 0,
                    TextTransparency = 0
                }, 0.3)
            end)
        end
    end
    
    -- Partículas durante la entrada
    spawn(function()
        wait(0.3)
        for i = 1, 10 do
            local particle = Utility:Create("Frame", {
                Name = "DialogParticle_" .. i,
                BackgroundColor3 = self.Theme.Ember,
                BackgroundTransparency = 0.7,
                BorderSizePixel = 0,
                Position = UDim2.fromScale(random(10, 90)/100, random(10, 90)/100),
                Size = UDim2.fromOffset(random(2, 4), random(2, 4)),
                ZIndex = 202,
                Parent = dialogFrame
            })
            
            -- Bordes redondos
            Utility:Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = particle
            })
            
            -- Animación de partícula
            Utility:Tween(particle, {
                Position = UDim2.fromScale(random(10, 90)/100, random(10, 90)/100),
                BackgroundTransparency = 1,
                Size = UDim2.fromOffset(random(4, 8), random(4, 8))
            }, random(10, 20)/10, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            
            delay(random(10, 20)/10, function()
                particle:Destroy()
            end)
        end
    end)
    
    return dialog
end

-- Obtener icono desde nombre
function NeonUI:GetIcon(name)
    local icons = {
        home = "7733960981",
        settings = "7734053495",
        user = "7743871002",
        star = "7734068321",
        warning = "7734036668",
        info = "7734010138",
        plus = "7734056604",
        minus = "7734062493",
        search = "7734093360",
        box = "7734155436",
        folder = "7734172055",
        chevron = "7734238686",
        gear = "7734053495",
        bell = "7743855514",
        heart = "7733718216",
        bookmark = "7743895266",
        key = "7733832079",
        flag = "7733777611",
        trash = "7733673941",
        edit = "7733799486",
        pencil = "7733696245",
        image = "7733946818",
        video = "7733709455",
        music = "7733656793",
        mic = "7733839766",
        phone = "7733790917",
        mail = "7733889662",
        send = "7733745099",
        code = "7733944826",
        terminal = "7733794336",
        link = "7733865183",
        file = "7733791228",
        archive = "7743824158",
        layers = "7733859130",
        compass = "7733857969",
        map = "7733837011",
        ["map-pin"] = "7733824551",
        award = "7743823882",
        upload = "7734172322",
        download = "7733982464",
        camera = "7733930958",
        play = "7743985991",
        pause = "7733904064",
        stop = "7733754058",
        message = "7733873146",
        users = "7734095912",
        activity = "7743823554",
        alert = "7743824019",
        eye = "7733760318",
        ["eye-off"] = "7743877488",
        gitlab = "7733897366",
        github = "7733873313",
        calendar = "7733812303",
        paperclip = "7733903117",
        scissors = "7734142322",
        tag = "7734197488",
        tags = "7733980420",
        tool = "7733928794",
        ["bar-chart"] = "7743825153",
        ["pie-chart"] = "7743883343",
        ["line-chart"] = "7743880222",
        zap = "7733679869",
        check = "7733956746",
        ["x"] = "7733717447",
        sliders = "7734176202",
        target = "7734226711",
        shield = "7734231071",
        sword = "7743915270",
        wifi = "7734114676",
        bluetooth = "7733768238",
        share = "7734181035",
        printer = "7733913543",
        cpu = "7733929456",
        speaker = "7734052733",
        tv = "7733766052",
        ["log-out"] = "7733978918",
        ["log-in"] = "7733923449",
        fire = "9835862639",  -- Icono de fuego
        player = "9835868665", -- Jugador
        credits = "9835865192", -- Créditos
        settings = "9835867929", -- Ajustes
        crown = "9482093348"    -- Corona
    }
    
    return icons[name:lower()] or "7733717447" -- Default to X icon
end

-- Crear ventana
function NeonUI:CreateWindow(options)
    options = options or {}
    local window = {
        Title = options.Title or "NeonUI",
        SubTitle = options.SubTitle or "",
        Size = options.Size or UDim2.fromOffset(550, 400),
        Position = options.Position or UDim2.fromScale(0.5, 0.5),
        Tabs = {},
        TabsFrame = nil,
        TabsContainer = nil,
        ContentContainer = nil,
        CurrentTab = nil,
        Settings = {},
        Flags = {}
    }
    
    -- Marco principal con efecto premium
    window.Frame = Utility:Create("Frame", {
        Name = "WindowFrame",
        BackgroundColor3 = self.Theme.Primary,
        BorderSizePixel = 0,
        Position = UDim2.fromScale(0.5, 0.5),
        AnchorPoint = Vector2.new(0.5, 0.5),
        Size = UDim2.fromOffset(0, 0), -- Empieza pequeño para animar
        Parent = self.Container,
        ZIndex = 10
    })
    
    -- Esquinas redondeadas premium
    Utility:Create("UICorner", {
        CornerRadius = UDim.new(0, 12),
        Parent = window.Frame
    })
    
    -- Efecto de sombra premium
    Utility:CreateShadow(window.Frame, {
        size = 20,
        intensity = 0.8
    })
    
    -- Fondo con efecto lava para toda la ventana
    Utility:CreateLavaBackground(window.Frame)
    
    -- Barra de título premium
    window.TitleBar = Utility:Create("Frame", {
        Name = "TitleBar",
        BackgroundColor3 = self.Theme.Secondary,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 40),
        ZIndex = 11,
        Parent = window.Frame
    })
    
    -- Esquinas superiores redondeadas
    Utility:Create("UICorner", {
        CornerRadius = UDim.new(0, 12),
        Parent = window.TitleBar
    })
    
    -- Arreglar esquinas para que solo sean redondeadas arriba
    local bottomFixFrame = Utility:Create("Frame", {
        Name = "BottomFixFrame",
        BackgroundColor3 = window.TitleBar.BackgroundColor3,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 1, -12),
        Size = UDim2.new(1, 0, 0, 12),
        ZIndex = window.TitleBar.ZIndex,
        Parent = window.TitleBar
    })
    
    -- Gradiente premium para barra de título
    local titleGradient = Utility:Create("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, self.Theme.Secondary:Lerp(self.Theme.Accent, 0.1)),
            ColorSequenceKeypoint.new(0.5, self.Theme.Secondary),
            ColorSequenceKeypoint.new(1, self.Theme.Secondary:Lerp(self.Theme.Accent, 0.1))
        }),
        Rotation = 90,
        Parent = window.TitleBar
    })
    
    -- Aplicar mismo gradiente al fix
    titleGradient:Clone().Parent = bottomFixFrame
    
    -- Animar el gradiente
    spawn(function()
        local offset = 0
        while titleGradient.Parent do
            offset = (offset + 0.005) % 2
            titleGradient.Offset = Vector2.new(0, offset - 0.5)
            wait(0.016)
        end
    end)
    
    -- Título con emoji e icono
    window.TitleText = Utility:Create("TextLabel", {
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.fromOffset(15, 0),
        Size = UDim2.new(1, -120, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = "🌋 " .. window.Title,
        TextColor3 = self.Theme.Text,
        TextSize = 18,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 12,
        Parent = window.TitleBar
    })
    
    -- Gradiente para el título
    Utility:Create("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, self.Theme.Text),
            ColorSequenceKeypoint.new(1, self.Theme.Accent)
        }),
        Parent = window.TitleText
    })
    
    -- Subtítulo
    if window.SubTitle and window.SubTitle ~= "" then
        window.SubTitleText = Utility:Create("TextLabel", {
            Name = "SubTitle",
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 15, 1, -16),
            Size = UDim2.new(1, -120, 0, 14),
            Font = Enum.Font.Gotham,
            Text = "By " .. window.SubTitle,
            TextColor3 = self.Theme.SubText,
            TextSize = 12,
            TextXAlignment = Enum.TextXAlignment.Left,
            ZIndex = 12,
            Parent = window.TitleBar
        })
        
        -- Ajustar posición del título
        window.TitleText.Position = UDim2.fromOffset(15, 4)
        window.TitleText.Size = UDim2.new(1, -120, 0, 20)
    end
    
    -- Botón de cerrar premium
    window.CloseButton = Utility:Create("TextButton", {
        Name = "CloseButton",
        BackgroundColor3 = Color3.fromRGB(255, 0, 0),
        BorderSizePixel = 0,
        Position = UDim2.new(1, -35, 0.5, -11),
        Size = UDim2.new(0, 22, 0, 22),
        Font = Enum.Font.GothamBold,
        Text = "×",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 18,
        ZIndex = 12,
        Parent = window.TitleBar
    })
    
    -- Esquinas redondeadas para botón cerrar
    Utility:Create("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = window.CloseButton
    })
    
    -- Efecto de brillo
    Utility:CreateGlow(window.CloseButton, Color3.fromRGB(255, 0, 0), 1.3, 11)
    
    -- Botón de minimizar premium
    window.MinimizeButton = Utility:Create("TextButton", {
        Name = "MinimizeButton",
        BackgroundColor3 = self.Theme.Accent,
        BorderSizePixel = 0,
        Position = UDim2.new(1, -67, 0.5, -11),
        Size = UDim2.new(0, 22, 0, 22),
        Font = Enum.Font.GothamBold,
        Text = "−",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 18,
        ZIndex = 12,
        Parent = window.TitleBar
    })
    
    -- Esquinas redondeadas para botón minimizar
    Utility:Create("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = window.MinimizeButton
    })
    
    -- Efecto de brillo
    Utility:CreateGlow(window.MinimizeButton, self.Theme.Accent, 1.3, 11)
    
    -- Contenedor de tabs con efectos premium
    window.TabsFrame = Utility:Create("Frame", {
        Name = "TabsFrame",
        BackgroundColor3 = self.Theme.Secondary,
        BorderSizePixel = 0,
        Position = UDim2.fromOffset(10, 50),
        Size = UDim2.new(0, 120, 1, -60),
        ZIndex = 11,
        Parent = window.Frame
    })
    
    -- Bordes redondeados
    Utility:Create("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = window.TabsFrame
    })
    
    -- Borde interior brillante
    Utility:Create("UIStroke", {
        Color = self.Theme.Accent,
        Thickness = 1,
        Transparency = 0.7,
        ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
        Parent = window.TabsFrame
    })
    
    -- Gradiente premium para tabs
    Utility:Create("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, self.Theme.Secondary:Lerp(self.Theme.Primary, 0.3)),
            ColorSequenceKeypoint.new(0.5, self.Theme.Secondary),
            ColorSequenceKeypoint.new(1, self.Theme.Secondary:Lerp(self.Theme.Primary, 0.3))
        }),
        Rotation = 90,
        Parent = window.TabsFrame
    })
    
    -- ScrollFrame para tabs con diseño premium
    window.TabsScrollFrame = Utility:Create("ScrollingFrame", {
        Name = "TabsScrollFrame",
        Active = true,
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.fromOffset(0, 10),
        Size = UDim2.new(1, 0, 1, -20),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 3,
        ScrollBarImageColor3 = self.Theme.Accent,
        ZIndex = 12,
        Parent = window.TabsFrame
    })
    
    -- Layout para tabs
    Utility:Create("UIListLayout", {
        Padding = UDim.new(0, 8),
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Parent = window.TabsScrollFrame
    })
    
    -- Padding para tabs
    Utility:Create("UIPadding", {
        PaddingLeft = UDim.new(0, 0),
        PaddingRight = UDim.new(0, 0),
        PaddingTop = UDim.new(0, 5),
        PaddingBottom = UDim.new(0, 5),
        Parent = window.TabsScrollFrame
    })
    
    -- Contenedor de contenido con diseño premium
    window.ContentFrame = Utility:Create("Frame", {
        Name = "ContentFrame",
        BackgroundColor3 = self.Theme.Secondary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 140, 0, 50),
        Size = UDim2.new(1, -150, 1, -60),
        ZIndex = 11,
        Parent = window.Frame
    })
    
    -- Bordes redondeados premium
    Utility:Create("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = window.ContentFrame
    })
    
    -- Borde interior brillante
    Utility:Create("UIStroke", {
        Color = self.Theme.Accent,
        Thickness = 1,
        Transparency = 0.7,
        ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
        Parent = window.ContentFrame
    })
    
    -- Gradiente premium para contenido
    Utility:Create("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, self.Theme.Secondary:Lerp(self.Theme.Primary, 0.3)),
            ColorSequenceKeypoint.new(0.5, self.Theme.Secondary),
            ColorSequenceKeypoint.new(1, self.Theme.Secondary:Lerp(self.Theme.Primary, 0.3))
        }),
        Rotation = 90,
        Parent = window.ContentFrame
    })
    
    -- Efectos de botones
    
    -- Cerrar botón
    window.CloseButton.MouseEnter:Connect(function()
        Utility:Tween(window.CloseButton, {
            Size = UDim2.new(0, 24, 0, 24),
            Position = UDim2.new(1, -36, 0.5, -12),
            BackgroundColor3 = Color3.fromRGB(255, 50, 50)
        }, 0.2)
    end)
    
    window.CloseButton.MouseLeave:Connect(function()
        Utility:Tween(window.CloseButton, {
            Size = UDim2.new(0, 22, 0, 22),
            Position = UDim2.new(1, -35, 0.5, -11),
            BackgroundColor3 = Color3.fromRGB(255, 0, 0)
        }, 0.2)
    end)
    
    window.CloseButton.MouseButton1Down:Connect(function()
        Utility:Tween(window.CloseButton, {
            Size = UDim2.new(0, 20, 0, 20),
            Position = UDim2.new(1, -34, 0.5, -10)
        }, 0.1)
    end)
    
    window.CloseButton.MouseButton1Up:Connect(function()
        Utility:Tween(window.CloseButton, {
            Size = UDim2.new(0, 24, 0, 24),
            Position = UDim2.new(1, -36, 0.5, -12)
        }, 0.1)
    end)
    
    -- Minimizar botón
    window.MinimizeButton.MouseEnter:Connect(function()
        Utility:Tween(window.MinimizeButton, {
            Size = UDim2.new(0, 24, 0, 24),
            Position = UDim2.new(1, -68, 0.5, -12),
            BackgroundColor3 = self.Theme.Accent:Lerp(Color3.new(1,1,1), 0.2)
        }, 0.2)
    end)
    
    window.MinimizeButton.MouseLeave:Connect(function()
        Utility:Tween(window.MinimizeButton, {
            Size = UDim2.new(0, 22, 0, 22),
            Position = UDim2.new(1, -67, 0.5, -11),
            BackgroundColor3 = self.Theme.Accent
        }, 0.2)
    end)
    
    window.MinimizeButton.MouseButton1Down:Connect(function()
        Utility:Tween(window.MinimizeButton, {
            Size = UDim2.new(0, 20, 0, 20),
            Position = UDim2.new(1, -66, 0.5, -10)
        }, 0.1)
    end)
    
    window.MinimizeButton.MouseButton1Up:Connect(function()
        Utility:Tween(window.MinimizeButton, {
            Size = UDim2.new(0, 24, 0, 24),
            Position = UDim2.new(1, -68, 0.5, -12)
        }, 0.1)
    end)
    
    -- Funcionalidad de los botones
    window.CloseButton.MouseButton1Click:Connect(function()
        -- Añadir partículas
        for i = 1, 20 do
            local particle = Utility:Create("Frame", {
                Name = "CloseParticle_" .. i,
                BackgroundColor3 = self.Theme.Ember,
                BackgroundTransparency = 0.4,
                BorderSizePixel = 0,
                Position = UDim2.fromScale(0.5, 0.5),
                Size = UDim2.fromOffset(random(2, 4), random(2, 4)),
                ZIndex = 20,
                Parent = window.Frame
            })
            
            -- Bordes redondos
            Utility:Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = particle
            })
            
            -- Dirección aleatoria
            local angle = random(0, 360)
            local distance = random(50, 200)
            
            -- Animación de partícula
            Utility:Tween(particle, {
                Position = UDim2.new(0.5, cos(math.rad(angle)) * distance, 0.5, sin(math.rad(angle)) * distance),
                BackgroundTransparency = 1,
                Size = UDim2.fromOffset(random(4, 8), random(4, 8))
            }, random(5, 15)/10, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        end
        
        -- Animar cierre
        Utility:Tween(window.Frame, {
            Size = UDim2.fromOffset(0, 0),
            Position = UDim2.fromScale(0.5, 0.5)
        }, 0.4, Enum.EasingStyle.Back, Enum.EasingDirection.In)
        
        task.wait(0.4)
        self.Container:Destroy()
    end)
    
    local minimized = false
    window.MinimizeButton.MouseButton1Click:Connect(function()
        minimized = not minimized
        
        if minimized then
            -- Animar minimización
            Utility:Tween(window.Frame, {
                Size = UDim2.new(0, window.Size.X.Offset, 0, 40)
            }, 0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
        else
            -- Animar maximización
            Utility:Tween(window.Frame, {
                Size = window.Size
            }, 0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
        end
    end)
    
    -- Hacer ventana arrastrable con física
    Utility:DraggableWithPhysics(window.Frame, window.TitleBar)
    
    -- Animar apertura de la ventana
    Utility:Tween(window.Frame, {
        Size = window.Size
    }, 0.4, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
    
    -- Métodos de ventana
    function window:AddTab(options)
        options = options or {}
        local tab = {
            Title = options.Title or "Tab",
            Icon = options.Icon,
            Sections = {},
            Elements = {}
        }
        
        -- Botón del tab con diseño premium
        tab.Button = Utility:Create("TextButton", {
            Name = options.Title .. "Tab",
            AutoButtonColor = false,
            BackgroundColor3 = NeonUI.Theme.Primary,
            BackgroundTransparency = 0.2,
            BorderSizePixel = 0,
            Size = UDim2.new(1, -20, 0, 36),
            Font = NeonUI.Theme.Font,
            Text = "",
            TextColor3 = NeonUI.Theme.Text,
            TextSize = NeonUI.Theme.FontSize,
            ZIndex = 13,
            Parent = window.TabsScrollFrame
        })
        
        -- Bordes redondeados premium
        Utility:Create("UICorner", {
            CornerRadius = UDim.new(0, 8),
            Parent = tab.Button
        })
        
        -- Borde premium con brillo
        local buttonBorder = Utility:Create("UIStroke", {
            Color = NeonUI.Theme.Accent,
            Thickness = 1,
            Transparency = 0.8,
            ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
            Parent = tab.Button
        })
        
        -- Icono del tab premium
        if tab.Icon then
            local iconImage = (tab.Icon:find("rbxassetid://") and tab.Icon) or ("rbxassetid://" .. NeonUI:GetIcon(tab.Icon))
            
            tab.IconHolder = Utility:Create("Frame", {
                Name = "IconHolder",
                BackgroundColor3 = NeonUI.Theme.Accent,
                BackgroundTransparency = 0.8,
                Position = UDim2.fromOffset(8, 0),
                Size = UDim2.fromOffset(26, 26),
                AnchorPoint = Vector2.new(0, 0.5),
                Position = UDim2.new(0, 8, 0.5, 0),
                ZIndex = 14,
                Parent = tab.Button
            })
            
            -- Redondear el icono
            Utility:Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = tab.IconHolder
            })
            
            tab.IconImage = Utility:Create("ImageLabel", {
                Name = "Icon",
                BackgroundTransparency = 1,
                Size = UDim2.fromOffset(16, 16),
                Position = UDim2.fromScale(0.5, 0.5),
                AnchorPoint = Vector2.new(0.5, 0.5),
                Image = iconImage,
                ImageColor3 = NeonUI.Theme.Text,
                ZIndex = 15,
                Parent = tab.IconHolder
            })
            
            tab.TitleLabel = Utility:Create("TextLabel", {
                Name = "Title",
                BackgroundTransparency = 1,
                Position = UDim2.fromOffset(40, 0),
                Size = UDim2.new(1, -50, 1, 0),
                Font = NeonUI.Theme.Font,
                Text = tab.Title,
                TextColor3 = NeonUI.Theme.Text,
                TextSize = NeonUI.Theme.FontSize,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 14,
                Parent = tab.Button
            })
        else
            tab.TitleLabel = Utility:Create("TextLabel", {
                Name = "Title",
                BackgroundTransparency = 1,
                Position = UDim2.fromOffset(10, 0),
                Size = UDim2.new(1, -20, 1, 0),
                Font = NeonUI.Theme.Font,
                Text = tab.Title,
                TextColor3 = NeonUI.Theme.Text,
                TextSize = NeonUI.Theme.FontSize,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 14,
                Parent = tab.Button
            })
        end
        
        -- Indicador de selección premium
        tab.SelectionIndicator = Utility:Create("Frame", {
            Name = "SelectionIndicator",
            BackgroundColor3 = NeonUI.Theme.Accent,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 0, 0.5, 0),
            AnchorPoint = Vector2.new(0, 0.5),
            Size = UDim2.new(0, 3, 0, 0),
            ZIndex = 15,
            Visible = false,
            Parent = tab.Button
        })
        
        -- Contenedor de contenido del tab con scroll premium
        tab.Container = Utility:Create("ScrollingFrame", {
            Name = options.Title .. "Container",
            Active = true,
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Position = UDim2.fromOffset(0, 0),
            Size = UDim2.new(1, 0, 1, 0),
            CanvasSize = UDim2.new(0, 0, 0, 0),
            AutomaticCanvasSize = Enum.AutomaticSize.Y,
            ScrollBarThickness = 3,
            ScrollBarImageColor3 = NeonUI.Theme.Accent,
            Visible = false,
            ZIndex = 12,
            Parent = window.ContentFrame
        })
        
        -- Lista para elementos del tab con espaciado premium
        Utility:Create("UIListLayout", {
            Padding = UDim.new(0, 10),
            HorizontalAlignment = Enum.HorizontalAlignment.Center,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Parent = tab.Container
        })
        
        -- Padding para elementos
        Utility:Create("UIPadding", {
            PaddingLeft = UDim.new(0, 10),
            PaddingRight = UDim.new(0, 10),
            PaddingTop = UDim.new(0, 10),
            PaddingBottom = UDim.new(0, 10),
            Parent = tab.Container
        })
        
        -- Efectos avanzados para el hover
        tab.Button.MouseEnter:Connect(function()
            if window.CurrentTab ~= tab then
                Utility:Tween(tab.Button, {
                    BackgroundColor3 = NeonUI.Theme.Primary:Lerp(NeonUI.Theme.Accent, 0.1),
                    BackgroundTransparency = 0,
                    Size = UDim2.new(1, -14, 0, 38)
                }, 0.2)
                
                Utility:Tween(buttonBorder, {
                    Transparency = 0.6
                }, 0.2)
                
                if tab.IconHolder then
                    Utility:Tween(tab.IconHolder, {
                        BackgroundTransparency = 0.6
                    }, 0.2)
                    
                    Utility:Tween(tab.IconImage, {
                        ImageColor3 = NeonUI.Theme.Text:Lerp(NeonUI.Theme.Accent, 0.3)
                    }, 0.2)
                end
                
                Utility:Tween(tab.TitleLabel, {
                    TextColor3 = NeonUI.Theme.Text:Lerp(NeonUI.Theme.Accent, 0.3),
                    Position = tab.TitleLabel.Position + UDim2.fromOffset(2, 0)
                }, 0.2)
            end
        end)
        
        tab.Button.MouseLeave:Connect(function()
            if window.CurrentTab ~= tab then
                Utility:Tween(tab.Button, {
                    BackgroundColor3 = NeonUI.Theme.Primary,
                    BackgroundTransparency = 0.2,
                    Size = UDim2.new(1, -20, 0, 36)
                }, 0.2)
                
                Utility:Tween(buttonBorder, {
                    Transparency = 0.8
                }, 0.2)
                
                if tab.IconHolder then
                    Utility:Tween(tab.IconHolder, {
                        BackgroundTransparency = 0.8
                    }, 0.2)
                    
                    Utility:Tween(tab.IconImage, {
                        ImageColor3 = NeonUI.Theme.Text
                    }, 0.2)
                end
                
                Utility:Tween(tab.TitleLabel, {
                    TextColor3 = NeonUI.Theme.Text,
                    Position = tab.IconHolder and UDim2.fromOffset(40, 0) or UDim2.fromOffset(10, 0)
                }, 0.2)
            end
        end)
        
        -- Seleccionar tab al hacer clic
        tab.Button.MouseButton1Click:Connect(function()
            window:SelectTab(tab)
        end)
        
        -- Añadir tab a la lista
        table.insert(window.Tabs, tab)
        
        -- Auto-seleccionar el primer tab
        if #window.Tabs == 1 then
            window:SelectTab(tab)
        end
        
        -- Métodos del tab
        function tab:AddSection(options)
            options = options or {}
            local section = {
                Title = options.Title or "Section",
                Elements = {}
            }
            
            -- Contenedor de sección con efectos premium
            section.Container = Utility:Create("Frame", {
                Name = section.Title .. "Section",
                BackgroundColor3 = NeonUI.Theme.Primary,
                BorderSizePixel = 0,
                Size = UDim2.new(1, 0, 0, 36),
                AutomaticSize = Enum.AutomaticSize.Y,
                ZIndex = 13,
                Parent = tab.Container
            })
            
            -- Bordes redondeados premium
            Utility:Create("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = section.Container
            })
            
            -- Borde interior con brillo
            Utility:Create("UIStroke", {
                Color = NeonUI.Theme.Accent,
                Thickness = 1,
                Transparency = 0.8,
                ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
                Parent = section.Container
            })
            
            -- Gradiente premium para secciones
            Utility:Create("UIGradient", {
                Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, NeonUI.Theme.Primary),
                    ColorSequenceKeypoint.new(0.5, NeonUI.Theme.Primary:Lerp(NeonUI.Theme.Secondary, 0.1)),
                    ColorSequenceKeypoint.new(1, NeonUI.Theme.Primary)
                }),
                Rotation = 90,
                Parent = section.Container
            })
            
            -- Título de sección premium con gradiente
            section.TitleLabel = Utility:Create("TextLabel", {
                Name = "Title",
                BackgroundTransparency = 1,
                Position = UDim2.fromOffset(15, 8),
                Size = UDim2.new(0, 0, 0, 20), -- Se ajustará al tamaño del texto
                Font = NeonUI.Theme.Font,
                Text = section.Title,
                TextColor3 = NeonUI.Theme.Text,
                TextSize = NeonUI.Theme.FontSize,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 14,
                Parent = section.Container
            })
            
            -- Gradiente para el título
            local titleGradient = Utility:Create("UIGradient", {
                Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, NeonUI.Theme.Text),
                    ColorSequenceKeypoint.new(1, NeonUI.Theme.Accent)
                }),
                Parent = section.TitleLabel
            })
            
            -- Ajustar ancho del título al texto
            local textSize = game:GetService("TextService"):GetTextSize(
                section.Title,
                NeonUI.Theme.FontSize,
                NeonUI.Theme.Font,
                Vector2.new(1000, 20)
            )
            
            section.TitleLabel.Size = UDim2.new(0, textSize.X, 0, 20)
            
            -- Separador adaptado al ancho del título
            section.Separator = Utility:Create("Frame", {
                Name = "Separator",
                BackgroundColor3 = NeonUI.Theme.Accent,
                BorderSizePixel = 0,
                Position = UDim2.new(0, 15, 0, 30),
                Size = UDim2.new(0, textSize.X, 0, 2),
                ZIndex = 14,
                Parent = section.Container
            })
            
            -- Gradiente para el separador
            local sepGradient = Utility:Create("UIGradient", {
                Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, NeonUI.Theme.Accent),
                    ColorSequenceKeypoint.new(1, NeonUI.Theme.Accent:Lerp(NeonUI.Theme.Text, 0.5))
                }),
                Parent = section.Separator
            })
            
            -- Animar gradiente del separador
            spawn(function()
                local offset = 0
                while sepGradient.Parent do
                    offset = (offset + 0.01) % 2
                    sepGradient.Offset = Vector2.new(offset - 0.5, 0)
                    wait(0.03)
                end
            end)
            
            -- Contenedor de elementos con diseño premium
            section.ElementsContainer = Utility:Create("Frame", {
                Name = "ElementsContainer",
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Position = UDim2.fromOffset(0, 40),
                Size = UDim2.new(1, 0, 0, 0),
                AutomaticSize = Enum.AutomaticSize.Y,
                ZIndex = 13,
                Parent = section.Container
            })
            
            -- Lista para elementos con espaciado premium
            Utility:Create("UIListLayout", {
                Padding = UDim.new(0, 8),
                HorizontalAlignment = Enum.HorizontalAlignment.Center,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Parent = section.ElementsContainer
            })
            
            -- Padding para elementos
            Utility:Create("UIPadding", {
                PaddingLeft = UDim.new(0, 10),
                PaddingRight = UDim.new(0, 10),
                PaddingTop = UDim.new(0, 5),
                PaddingBottom = UDim.new(0, 10),
                Parent = section.ElementsContainer
            })
            
            -- Añadir sección a la lista
            table.insert(tab.Sections, section)
            
            -- Botón Premium
            function section:AddButton(options)
                options = options or {}
                local button = {
                    Title = options.Title or "Button",
                    Description = options.Description,
                    Callback = options.Callback or function() end
                }
                
                -- Altura del botón (dependiendo de si tiene descripción)
                local buttonHeight = button.Description and 60 or 42
                
                -- Contenedor del botón con efectos premium
                button.Container = Utility:Create("Frame", {
                    Name = button.Title .. "Button",
                    BackgroundColor3 = NeonUI.Theme.Secondary:Lerp(NeonUI.Theme.Primary, 0.5),
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 0, buttonHeight),
                    ZIndex = 14,
                    Parent = section.ElementsContainer
                })
                
                -- Bordes redondeados premium
                Utility:Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = button.Container
                })
                
                -- Borde premium con brillo
                Utility:Create("UIStroke", {
                    Color = NeonUI.Theme.Accent,
                    Thickness = 1,
                    Transparency = 0.8,
                    ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
                    Parent = button.Container
                })
                
                -- Botón interactivo premium con efectos
                button.ButtonElement = Utility:Create("TextButton", {
                    Name = "ButtonElement",
                    BackgroundColor3 = NeonUI.Theme.Accent,
                    BorderSizePixel = 0,
                    Position = UDim2.new(1, -110, 0.5, -18),
                    Size = UDim2.new(0, 100, 0, 36),
                    Font = NeonUI.Theme.Font,
                    Text = "CLICK",
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = NeonUI.Theme.FontSize,
                    ZIndex = 15,
                    Parent = button.Container
                })
                
                -- Bordes redondeados premium para botón
                Utility:Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = button.ButtonElement
                })
                
                -- Gradiente premium para botón
                local buttonGradient = Utility:Create("UIGradient", {
                    Color = ColorSequence.new({
                        ColorSequenceKeypoint.new(0, NeonUI.Theme.Accent),
                        ColorSequenceKeypoint.new(0.5, NeonUI.Theme.Accent:Lerp(Color3.new(1,1,1), 0.2)),
                        ColorSequenceKeypoint.new(1, NeonUI.Theme.Accent)
                    }),
                    Rotation = 45,
                    Parent = button.ButtonElement
                })
                
                -- Animar gradiente
                spawn(function()
                    local offset = 0
                    while buttonGradient.Parent do
                        offset = (offset + 0.01) % 2
                        buttonGradient.Offset = Vector2.new(offset - 0.5, 0)
                        wait(0.016)
                    end
                end)
                
                -- Efecto de brillo premium
                Utility:CreateGlow(button.ButtonElement, NeonUI.Theme.Glow, 1.2, 14)
                
                -- Título y descripción con efectos premium
                if button.Description then
                    button.TitleLabel = Utility:Create("TextLabel", {
                        Name = "Title",
                        BackgroundTransparency = 1,
                        Position = UDim2.fromOffset(14, 10),
                        Size = UDim2.new(1, -130, 0, 20),
                        Font = NeonUI.Theme.Font,
                        Text = button.Title,
                        TextColor3 = NeonUI.Theme.Text,
                        TextSize = NeonUI.Theme.FontSize,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        ZIndex = 15,
                        Parent = button.Container
                    })
                    
                    -- Gradiente para el título
                    Utility:Create("UIGradient", {
                        Color = ColorSequence.new({
                            ColorSequenceKeypoint.new(0, NeonUI.Theme.Text),
                            ColorSequenceKeypoint.new(1, NeonUI.Theme.Accent)
                        }),
                        Parent = button.TitleLabel
                    })
                    
                    button.DescriptionLabel = Utility:Create("TextLabel", {
                        Name = "Description",
                        BackgroundTransparency = 1,
                        Position = UDim2.fromOffset(14, 30),
                        Size = UDim2.new(1, -130, 0, 20),
                        Font = Enum.Font.Gotham,
                        Text = button.Description,
                        TextColor3 = NeonUI.Theme.SubText,
                        TextSize = NeonUI.Theme.FontSize - 2,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        ZIndex = 15,
                        Parent = button.Container
                    })
                else
                    button.TitleLabel = Utility:Create("TextLabel", {
                        Name = "Title",
                        BackgroundTransparency = 1,
                        Position = UDim2.fromOffset(14, 0),
                        Size = UDim2.new(1, -130, 1, 0),
                        Font = NeonUI.Theme.Font,
                        Text = button.Title,
                        TextColor3 = NeonUI.Theme.Text,
                        TextSize = NeonUI.Theme.FontSize,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        ZIndex = 15,
                        Parent = button.Container
                    })
                    
                    -- Gradiente para el título
                    Utility:Create("UIGradient", {
                        Color = ColorSequence.new({
                            ColorSequenceKeypoint.new(0, NeonUI.Theme.Text),
                            ColorSequenceKeypoint.new(1, NeonUI.Theme.Accent)
                        }),
                        Parent = button.TitleLabel
                    })
                end
                
                -- Efectos avanzados para hover
                button.ButtonElement.MouseEnter:Connect(function()
                    Utility:Tween(button.ButtonElement, {
                        Size = UDim2.new(0, 104, 0, 38),
                        Position = UDim2.new(1, -112, 0.5, -19),
                        BackgroundColor3 = NeonUI.Theme.Accent:Lerp(Color3.new(1,1,1), 0.2)
                    }, 0.2)
                    
                    -- Crear partículas de hover
                    Utility:CreateParticles(button.ButtonElement, {
                        color = NeonUI.Theme.Ember,
                        count = 3,
                        size = {min = 2, max = 4},
                        speed = 0.5
                    })
                end)
                
                button.ButtonElement.MouseLeave:Connect(function()
                    Utility:Tween(button.ButtonElement, {
                        Size = UDim2.new(0, 100, 0, 36),
                        Position = UDim2.new(1, -110, 0.5, -18),
                        BackgroundColor3 = NeonUI.Theme.Accent
                    }, 0.2)
                    
                    -- Limpiar partículas
                    for _, child in pairs(button.ButtonElement:GetChildren()) do
                        if child.Name == "ParticleContainer" then
                            child:Destroy()
                        end
                    end
                end)
                
                -- Efecto al hacer clic con partículas y animación
                button.ButtonElement.MouseButton1Click:Connect(function()
                    -- Efecto de ripple mejorado
                    Utility:Ripple(button.ButtonElement)
                    
                    -- Animación de pulsación
                    Utility:Tween(button.ButtonElement, {
                        Size = UDim2.new(0, 96, 0, 34),
                        Position = UDim2.new(1, -108, 0.5, -17)
                    }, 0.1)
                    
                    -- Emisión de partículas al hacer clic
                    for i = 1, 8 do
                        local particle = Utility:Create("Frame", {
                            Name = "ClickParticle_" .. i,
                            BackgroundColor3 = NeonUI.Theme.Ember,
                            BackgroundTransparency = 0.4,
                            BorderSizePixel = 0,
                            Position = UDim2.fromScale(0.5, 0.5),
                            Size = UDim2.fromOffset(random(2, 4), random(2, 4)),
                            ZIndex = 16,
                            Parent = button.ButtonElement
                        })
                        
                        -- Bordes redondos
                        Utility:Create("UICorner", {
                            CornerRadius = UDim.new(1, 0),
                            Parent = particle
                        })
                        
                        -- Dirección aleatoria
                        local angle = random(0, 360)
                        local distance = random(20, 40)
                        
                        -- Animación de partícula
                        Utility:Tween(particle, {
                            Position = UDim2.new(0.5, cos(math.rad(angle)) * distance, 0.5, sin(math.rad(angle)) * distance),
                            BackgroundTransparency = 1,
                            Size = UDim2.fromOffset(random(4, 8), random(4, 8))
                        }, random(5, 15)/10, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                        
                        delay(random(5, 15)/10, function()
                            particle:Destroy()
                        end)
                    end
                    
                    task.wait(0.1)
                    
                    -- Restaurar tamaño
                    Utility:Tween(button.ButtonElement, {
                        Size = UDim2.new(0, 104, 0, 38),
                        Position = UDim2.new(1, -112, 0.5, -19)
                    }, 0.1)
                    
                    task.spawn(button.Callback)
                end)
                
                -- Añadir a la lista de elementos
                table.insert(section.Elements, button)
                
                return button
            end
            
            -- Toggle (Interruptor) Premium
            function section:AddToggle(options)
                options = options or {}
                local toggle = {
                    Title = options.Title or "Toggle",
                    Description = options.Description,
                    Default = options.Default or false,
                    Flag = options.Flag,
                    Callback = options.Callback or function() end,
                    Value = options.Default or false
                }
                
                -- Registrar flag si existe
                if toggle.Flag then
                    window.Flags[toggle.Flag] = toggle.Value
                end
                
                -- Altura del toggle (dependiendo de si tiene descripción)
                local toggleHeight = toggle.Description and 60 or 42
                
                -- Contenedor del toggle con efectos premium
                toggle.Container = Utility:Create("Frame", {
                    Name = toggle.Title .. "Toggle",
                    BackgroundColor3 = NeonUI.Theme.Secondary:Lerp(NeonUI.Theme.Primary, 0.5),
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 0, toggleHeight),
                    ZIndex = 14,
                    Parent = section.ElementsContainer
                })
                
                -- Bordes redondeados premium
                Utility:Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = toggle.Container
                })
                
                -- Borde premium con brillo
                Utility:Create("UIStroke", {
                    Color = NeonUI.Theme.Accent,
                    Thickness = 1,
                    Transparency = 0.8,
                    ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
                    Parent = toggle.Container
                })
                
                -- Título y descripción con estilo premium
                if toggle.Description then
                    toggle.TitleLabel = Utility:Create("TextLabel", {
                        Name = "Title",
                        BackgroundTransparency = 1,
                        Position = UDim2.fromOffset(14, 10),
                        Size = UDim2.new(1, -70, 0, 20),
                        Font = NeonUI.Theme.Font,
                        Text = toggle.Title,
                        TextColor3 = NeonUI.Theme.Text,
                        TextSize = NeonUI.Theme.FontSize,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        ZIndex = 15,
                        Parent = toggle.Container
                    })
                    
                    -- Gradiente para el título
                    Utility:Create("UIGradient", {
                        Color = ColorSequence.new({
                            ColorSequenceKeypoint.new(0, NeonUI.Theme.Text),
                            ColorSequenceKeypoint.new(1, NeonUI.Theme.Accent)
                        }),
                        Parent = toggle.TitleLabel
                    })
                    
                    toggle.DescriptionLabel = Utility:Create("TextLabel", {
                        Name = "Description",
                        BackgroundTransparency = 1,
                        Position = UDim2.fromOffset(14, 30),
                        Size = UDim2.new(1, -70, 0, 20),
                        Font = Enum.Font.Gotham,
                        Text = toggle.Description,
                        TextColor3 = NeonUI.Theme.SubText,
                        TextSize = NeonUI.Theme.FontSize - 2,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        ZIndex = 15,
                        Parent = toggle.Container
                    })
                else
                    toggle.TitleLabel = Utility:Create("TextLabel", {
                        Name = "Title",
                        BackgroundTransparency = 1,
                        Position = UDim2.fromOffset(14, 0),
                        Size = UDim2.new(1, -70, 1, 0),
                        Font = NeonUI.Theme.Font,
                        Text = toggle.Title,
                        TextColor3 = NeonUI.Theme.Text,
                        TextSize = NeonUI.Theme.FontSize,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        ZIndex = 15,
                        Parent = toggle.Container
                    })
                    
                    -- Gradiente para el título
                    Utility:Create("UIGradient", {
                        Color = ColorSequence.new({
                            ColorSequenceKeypoint.new(0, NeonUI.Theme.Text),
                            ColorSequenceKeypoint.new(1, NeonUI.Theme.Accent)
                        }),
                        Parent = toggle.TitleLabel
                    })
                end
                
                -- Toggle switch premium con efectos
                toggle.Switch = Utility:Create("Frame", {
                    Name = "Switch",
                    BackgroundColor3 = toggle.Value and NeonUI.Theme.Accent or Color3.fromRGB(80, 80, 80),
                    BorderSizePixel = 0,
                    Position = UDim2.new(1, -55, 0.5, 0),
                    AnchorPoint = Vector2.new(0, 0.5),
                    Size = UDim2.fromOffset(40, 20),
                    ZIndex = 15,
                    Parent = toggle.Container
                })
                
                -- Bordes redondeados para switch
                Utility:Create("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = toggle.Switch
                })
                
                -- Círculo del switch premium
                toggle.Circle = Utility:Create("Frame", {
                    Name = "Circle",
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, toggle.Value and 22 or 2, 0.5, 0),
                    AnchorPoint = Vector2.new(0, 0.5),
                    Size = UDim2.fromOffset(16, 16),
                    ZIndex = 16,
                    Parent = toggle.Switch
                })
                
                -- Bordes redondeados para círculo
                Utility:Create("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = toggle.Circle
                })
                
                -- Brillo al círculo
                Utility:CreateGlow(toggle.Circle, Color3.fromRGB(255, 255, 255), 1.1, 15)
                
                -- Botón para interactuar
                toggle.Button = Utility:Create("TextButton", {
                    Name = "ToggleButton",
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    Text = "",
                    ZIndex = 16,
                    Parent = toggle.Container
                })
                
                -- Función para cambiar el estado con animación
                function toggle:Set(value)
                    toggle.Value = value
                    
                    -- Animar el switch
                    Utility:Tween(toggle.Switch, {
                        BackgroundColor3 = toggle.Value and NeonUI.Theme.Accent or Color3.fromRGB(80, 80, 80)
                    }, 0.2)
                    
                    Utility:Tween(toggle.Circle, {
                        Position = UDim2.new(0, toggle.Value and 22 or 2, 0.5, 0)
                    }, 0.2)
                    
                    -- Brillo cuando está activado
                    if toggle.Value then
                        if not toggle.Switch:FindFirstChild("Glow") then
                            Utility:CreateGlow(toggle.Switch, NeonUI.Theme.Glow, 1.3, 14)
                        end
                    else
                        if toggle.Switch:FindFirstChild("Glow") then
                            toggle.Switch.Glow:Destroy()
                        end
                    end
                    
                    -- Crear partículas al activar/desactivar
                    if toggle.Container:FindFirstChild("ToggleParticles") then
                        toggle.Container.ToggleParticles:Destroy()
                    end
                    
                    local particleContainer = Utility:Create("Frame", {
                        Name = "ToggleParticles",
                        BackgroundTransparency = 1,
                        Size = UDim2.fromScale(1, 1),
                        ZIndex = 17,
                        Parent = toggle.Switch
                    })
                    
                    for i = 1, 5 do
                        local particle = Utility:Create("Frame", {
                            Name = "Particle" .. i,
                            BackgroundColor3 = toggle.Value and NeonUI.Theme.Ember or Color3.fromRGB(200, 200, 200),
                            BackgroundTransparency = 0.4,
                            BorderSizePixel = 0,
                            Size = UDim2.fromOffset(random(2, 4), random(2, 4)),
                            Position = UDim2.new(toggle.Value and 1 or 0, 0, 0.5, 0),
                            AnchorPoint = Vector2.new(toggle.Value and 1 or 0, 0.5),
                            ZIndex = 17,
                            Parent = particleContainer
                        })
                        
                        -- Bordes redondeados para partículas
                        Utility:Create("UICorner", {
                            CornerRadius = UDim.new(1, 0),
                            Parent = particle
                        })
                        
                        -- Animar partículas
                        local angle = random(-30, 30) + (toggle.Value and 0 or 180)
                        local distance = random(15, 30)
                        
                        Utility:Tween(particle, {
                            Position = UDim2.new(
                                toggle.Value and 1 or 0, 
                                cos(math.rad(angle)) * distance, 
                                0.5, 
                                sin(math.rad(angle)) * distance
                            ),
                            BackgroundTransparency = 1,
                            Size = UDim2.fromOffset(random(4, 7), random(4, 7))
                        }, random(5, 10) / 10, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                    end
                    
                    -- Limpiar partículas después de un tiempo
                    delay(1, function()
                        if particleContainer and particleContainer.Parent then
                            particleContainer:Destroy()
                        end
                    end)
                    
                    if toggle.Flag then
                        window.Flags[toggle.Flag] = toggle.Value
                    end
                    
                    toggle.Callback(toggle.Value)
                end
                
                -- Establecer valor inicial
                toggle:Set(toggle.Value)
                
                -- Evento de clic con efectos
                toggle.Button.MouseButton1Click:Connect(function()
                    -- Animar el contenedor al hacer clic
                    Utility:Tween(toggle.Container, {
                        BackgroundColor3 = NeonUI.Theme.Secondary:Lerp(NeonUI.Theme.Accent, 0.1)
                    }, 0.1)
                    
                    task.wait(0.1)
                    
                    Utility:Tween(toggle.Container, {
                        BackgroundColor3 = NeonUI.Theme.Secondary:Lerp(NeonUI.Theme.Primary, 0.5)
                    }, 0.1)
                    
                    toggle:Set(not toggle.Value)
                end)
                
                -- Efectos de hover
                toggle.Button.MouseEnter:Connect(function()
                    Utility:Tween(toggle.Container, {
                        BackgroundColor3 = NeonUI.Theme.Secondary:Lerp(NeonUI.Theme.Accent, 0.05)
                    }, 0.2)
                end)
                
                toggle.Button.MouseLeave:Connect(function()
                    Utility:Tween(toggle.Container, {
                        BackgroundColor3 = NeonUI.Theme.Secondary:Lerp(NeonUI.Theme.Primary, 0.5)
                    }, 0.2)
                end)
                
                -- Añadir a la lista de elementos
                table.insert(section.Elements, toggle)
                
                return toggle
            end
            
            -- Texto informativo Premium
            function section:AddParagraph(options)
                options = options or {}
                local paragraph = {
                    Title = options.Title or "Paragraph",
                    Content = options.Content or ""
                }
                
                -- Calcular altura en función del contenido
                local contentLines = #string.split(paragraph.Content, "\n")
                local paragraphHeight = math.max(60, 36 + (contentLines * 20))
                
                -- Contenedor del párrafo con efectos premium
                paragraph.Container = Utility:Create("Frame", {
                    Name = paragraph.Title .. "Paragraph",
                    BackgroundColor3 = NeonUI.Theme.Secondary:Lerp(NeonUI.Theme.Primary, 0.5),
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 0, paragraphHeight),
                    ZIndex = 14,
                    Parent = section.ElementsContainer
                })
                
                -- Bordes redondeados premium
                Utility:Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = paragraph.Container
                })
                
                -- Borde premium con brillo
                Utility:Create("UIStroke", {
                    Color = NeonUI.Theme.Accent,
                    Thickness = 1,
                    Transparency = 0.8,
                    ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
                    Parent = paragraph.Container
                })
                
                -- Título con estilo premium
                paragraph.TitleLabel = Utility:Create("TextLabel", {
                    Name = "Title",
                    BackgroundTransparency = 1,
                    Position = UDim2.fromOffset(14, 8),
                    Size = UDim2.new(0, 0, 0, 20), -- Se ajustará al tamaño del texto
                    Font = NeonUI.Theme.Font,
                    Text = paragraph.Title,
                    TextColor3 = NeonUI.Theme.Text,
                    TextSize = NeonUI.Theme.FontSize,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    ZIndex = 15,
                    Parent = paragraph.Container
                })
                
                -- Gradiente para el título
                local titleGradient = Utility:Create("UIGradient", {
                    Color = ColorSequence.new({
                        ColorSequenceKeypoint.new(0, NeonUI.Theme.Text),
                        ColorSequenceKeypoint.new(1, NeonUI.Theme.Accent)
                    }),
                    Parent = paragraph.TitleLabel
                })
                
                -- Ajustar ancho del título al texto
                local textSize = game:GetService("TextService"):GetTextSize(
                    paragraph.Title,
                    NeonUI.Theme.FontSize,
                    NeonUI.Theme.Font,
                    Vector2.new(1000, 20)
                )
                
                paragraph.TitleLabel.Size = UDim2.new(0, textSize.X, 0, 20)
                
                -- Separador adaptado al ancho del título
                paragraph.Separator = Utility:Create("Frame", {
                    Name = "Separator",
                    BackgroundColor3 = NeonUI.Theme.Accent,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 14, 0, 30),
                    Size = UDim2.new(0, textSize.X, 0, 2),
                    ZIndex = 15,
                    Parent = paragraph.Container
                })
                
                -- Gradiente para el separador
                local sepGradient = Utility:Create("UIGradient", {
                    Color = ColorSequence.new({
                        ColorSequenceKeypoint.new(0, NeonUI.Theme.Accent),
                        ColorSequenceKeypoint.new(1, NeonUI.Theme.Accent:Lerp(NeonUI.Theme.Text, 0.5))
                    }),
                    Parent = paragraph.Separator
                })
                
                -- Animar gradiente del separador
                spawn(function()
                    local offset = 0
                    while sepGradient.Parent do
                        offset = (offset + 0.01) % 2
                        sepGradient.Offset = Vector2.new(offset - 0.5, 0)
                        wait(0.03)
                    end
                end)
                
                -- Contenido premium con efectos
                paragraph.ContentLabel = Utility:Create("TextLabel", {
                    Name = "Content",
                    BackgroundTransparency = 1,
                    Position = UDim2.fromOffset(14, 38),
                    Size = UDim2.new(1, -28, 0, paragraphHeight - 46),
                    Font = Enum.Font.Gotham,
                    Text = paragraph.Content,
                    TextColor3 = NeonUI.Theme.SubText,
                    TextSize = NeonUI.Theme.FontSize - 1,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    TextYAlignment = Enum.TextYAlignment.Top,
                    TextWrapped = true,
                    ZIndex = 15,
                    Parent = paragraph.Container
                })
                
                -- Método para actualizar el contenido
                function paragraph:SetContent(content)
                    paragraph.Content = content
                    paragraph.ContentLabel.Text = content
                    
                    -- Recalcular altura
                    local newContentLines = #string.split(content, "\n")
                    local newHeight = math.max(60, 36 + (newContentLines * 20))
                    
                    Utility:Tween(paragraph.Container, {
                        Size = UDim2.new(1, 0, 0, newHeight)
                    }, 0.3)
                    
                    Utility:Tween(paragraph.ContentLabel, {
                        Size = UDim2.new(1, -28, 0, newHeight - 46)
                    }, 0.3)
                end
                
                -- Añadir a la lista de elementos
                table.insert(section.Elements, paragraph)
                
                return paragraph
            end
            
            return section
        end
        
        -- Obtener elementos por flag
        function tab:GetElement(flag)
            for _, section in ipairs(tab.Sections) do
                for _, element in ipairs(section.Elements) do
                    if element.Flag == flag then
                        return element
                    end
                end
            end
            return nil
        end
        
        return tab
    end
    
    -- Seleccionar tab con animación premium
    function window:SelectTab(tab)
        if window.CurrentTab == tab then return end
        
        -- Ocultar tab actual si existe
        if window.CurrentTab then
            -- Desactivar estilo
            Utility:Tween(window.CurrentTab.Button, {
                BackgroundColor3 = NeonUI.Theme.Primary,
                BackgroundTransparency = 0.2,
                Size = UDim2.new(1, -20, 0, 36)
            }, 0.2)
            
            if window.CurrentTab.Button:FindFirstChild("Glow") then
                window.CurrentTab.Button.Glow:Destroy()
            end
            
            -- Resetear selección
            window.CurrentTab.SelectionIndicator.Visible = false
            
            -- Ocultar página con desvanecimiento
            local containers = window.CurrentTab.Container:GetChildren()
            for i, child in ipairs(containers) do
                if child:IsA("Frame") then
                    Utility:Tween(child, {
                        Position = UDim2.new(-0.1, 0, child.Position.Y.Scale, child.Position.Y.Offset),
                        BackgroundTransparency = 1
                    }, 0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.In)
                end
            end
            
            -- Ocultar contenedor después de animación
            task.delay(0.2, function()
                window.CurrentTab.Container.Visible = false
            end)
        end
        
        -- Mostrar nuevo tab con animación
        window.CurrentTab = tab
        tab.Container.Visible = true
        
        -- Activar estilo
        Utility:Tween(tab.Button, {
            BackgroundColor3 = NeonUI.Theme.Accent,
            BackgroundTransparency = 0,
            Size = UDim2.new(1, -10, 0, 40)
        }, 0.3)
        
        -- Añadir brillo
        Utility:CreateGlow(tab.Button, NeonUI.Theme.Glow, 1.2, 12)
        
        -- Mostrar indicador con animación
        tab.SelectionIndicator.Visible = true
        tab.SelectionIndicator.Size = UDim2.new(0, 3, 0, 0)
        tab.SelectionIndicator.Position = UDim2.new(0, 0, 0.5, 0)
        
        Utility:Tween(tab.SelectionIndicator, {
            Size = UDim2.new(0, 3, 0, 34),
            Position = UDim2.new(0, 0, 0.5, -17)
        }, 0.3, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
        
        -- Animar entrada de elementos con efecto cascada
        local containers = tab.Container:GetChildren()
        for i, child in ipairs(containers) do
            if child:IsA("Frame") then
                child.Position = UDim2.new(0.1, 0, child.Position.Y.Scale, child.Position.Y.Offset)
                child.BackgroundTransparency = 1
                
                task.delay(0.05 * i, function()
                    Utility:Tween(child, {
                        Position = UDim2.new(0, 0, child.Position.Y.Scale, child.Position.Y.Offset),
                        BackgroundTransparency = 0
                    }, 0.3, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
                end)
            end
        end
    end
    
    -- Obtener elementos por flag
    function window:GetFlag(flag)
        return window.Flags[flag]
    end
    
    -- Guardar configuración
    function window:SaveConfig(name)
        if not name then
            name = "default"
        end
        
        local success = SaveSystem:SaveSettings(name, window.Flags)
        
        if success then
            NeonUI:Notify({
                Title = "Configuración Guardada",
                Content = "La configuración se ha guardado correctamente como: " .. name,
                Duration = 3,
                Type = "success"
            })
        else
            NeonUI:Notify({
                Title = "Error al Guardar",
                Content = "No se pudo guardar la configuración. Comprueba permisos de escritura.",
                Duration = 3,
                Type = "error"
            })
        end
        
        return success
    end
    
    -- Cargar configuración
    function window:LoadConfig(name)
        if not name then
            name = "default"
        end
        
        local config = SaveSystem:LoadSettings(name)
        if not config then
            NeonUI:Notify({
                Title = "Error al Cargar",
                Content = "No se encontró la configuración: " .. name,
                Duration = 3,
                Type = "error"
            })
            return false
        end
        
        -- Aplicar configuración cargada
        for flag, value in pairs(config) do
            window.Flags[flag] = value
            
            -- Recorrer tabs para encontrar el elemento
            for _, tab in pairs(window.Tabs) do
                local element = tab:GetElement(flag)
                if element and element.Set then
                    element:Set(value)
                end
            end
        end
        
        NeonUI:Notify({
            Title = "Configuración Cargada",
            Content = "La configuración se ha cargado correctamente: " .. name,
            Duration = 3,
            Type = "success"
        })
        
        return true
    end
    
    table.insert(self.Windows, window)
    return window
end

return NeonUI
